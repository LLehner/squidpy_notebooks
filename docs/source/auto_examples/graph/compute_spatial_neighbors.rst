
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_spatial_neighbors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/graph/compute_spatial_neighbors.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_spatial_neighbors.py:

Building spatial neighbors graph
--------------------------------

This example shows how to compute a spatial neighbors graph.

Spatial graph is a graph of spatial neighbors with observations as nodes
and neighbor-hood relations between observations as edges.
We use spatial coordinates of spots/cells to identify neighbors among them.
Different approach of defining a neighborhood relation among observations are used
for different types of spatial datasets.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 21-22

First, we show how to compute the spatial neighbors graph for a Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    adata = sq.datasets.visium_fluo_adata()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/242M [00:00<?, ?B/s]      0%|          | 56.0k/242M [00:00<09:39, 438kB/s]      0%|          | 160k/242M [00:00<06:31, 648kB/s]       0%|          | 704k/242M [00:00<01:52, 2.25MB/s]      1%|1         | 2.78M/242M [00:00<00:32, 7.83MB/s]      3%|3         | 8.09M/242M [00:00<00:12, 20.0MB/s]      6%|5         | 13.8M/242M [00:00<00:08, 28.4MB/s]      8%|8         | 19.8M/242M [00:00<00:06, 34.3MB/s]     11%|#         | 25.6M/242M [00:01<00:06, 37.8MB/s]     13%|#2        | 31.3M/242M [00:01<00:05, 40.0MB/s]     15%|#5        | 37.1M/242M [00:01<00:05, 41.6MB/s]     18%|#7        | 43.0M/242M [00:01<00:04, 43.0MB/s]     20%|##        | 48.5M/242M [00:01<00:04, 43.1MB/s]     22%|##2       | 54.2M/242M [00:01<00:04, 43.3MB/s]     25%|##4       | 60.0M/242M [00:01<00:04, 44.2MB/s]     27%|##7       | 65.7M/242M [00:01<00:03, 47.9MB/s]     28%|##8       | 68.5M/242M [00:02<00:04, 42.8MB/s]     31%|###       | 74.3M/242M [00:02<00:04, 43.6MB/s]     33%|###3      | 80.2M/242M [00:02<00:03, 44.3MB/s]     35%|###5      | 85.5M/242M [00:02<00:03, 47.1MB/s]     37%|###6      | 88.5M/242M [00:02<00:03, 42.7MB/s]     39%|###8      | 94.3M/242M [00:02<00:03, 43.4MB/s]     41%|####1     | 99.8M/242M [00:02<00:03, 47.2MB/s]     43%|####2     | 103M/242M [00:02<00:03, 43.1MB/s]      45%|####4     | 108M/242M [00:02<00:02, 47.2MB/s]     46%|####6     | 112M/242M [00:03<00:03, 42.6MB/s]     48%|####8     | 117M/242M [00:03<00:02, 46.4MB/s]     50%|####9     | 120M/242M [00:03<00:03, 42.5MB/s]     52%|#####1    | 126M/242M [00:03<00:02, 46.7MB/s]     53%|#####3    | 129M/242M [00:03<00:02, 42.5MB/s]     55%|#####5    | 134M/242M [00:03<00:02, 46.1MB/s]     57%|#####6    | 137M/242M [00:03<00:02, 42.5MB/s]     59%|#####9    | 143M/242M [00:03<00:02, 43.1MB/s]     61%|######1   | 149M/242M [00:03<00:02, 47.7MB/s]     63%|######2   | 152M/242M [00:04<00:02, 43.1MB/s]     65%|######4   | 157M/242M [00:04<00:01, 47.0MB/s]     66%|######6   | 160M/242M [00:04<00:02, 42.3MB/s]     68%|######8   | 166M/242M [00:04<00:01, 46.7MB/s]     70%|######9   | 169M/242M [00:04<00:01, 42.4MB/s]     72%|#######2  | 175M/242M [00:04<00:01, 43.6MB/s]     75%|#######4  | 181M/242M [00:04<00:01, 48.5MB/s]     76%|#######5  | 184M/242M [00:04<00:01, 43.6MB/s]     78%|#######7  | 189M/242M [00:04<00:01, 46.2MB/s]     79%|#######9  | 192M/242M [00:04<00:01, 42.5MB/s]     81%|########1 | 197M/242M [00:05<00:01, 46.2MB/s]     83%|########2 | 200M/242M [00:05<00:01, 42.7MB/s]     85%|########4 | 206M/242M [00:05<00:00, 46.5MB/s]     86%|########6 | 209M/242M [00:05<00:00, 42.9MB/s]     88%|########8 | 214M/242M [00:05<00:00, 45.3MB/s]     90%|########9 | 218M/242M [00:05<00:00, 43.1MB/s]     92%|#########1| 223M/242M [00:05<00:00, 45.2MB/s]     93%|#########3| 226M/242M [00:05<00:00, 42.7MB/s]     95%|#########5| 231M/242M [00:05<00:00, 45.4MB/s]     97%|#########6| 234M/242M [00:05<00:00, 42.2MB/s]     99%|#########8| 239M/242M [00:06<00:00, 44.9MB/s]    100%|##########| 242M/242M [00:06<00:00, 41.2MB/s]

    AnnData object with n_obs × n_vars = 2800 × 16562
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_MT', 'log1p_total_counts_MT', 'pct_counts_MT', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'MT', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 26-32

We use :func:`squidpy.gr.spatial_neighbors` for this.
The function expects ``coord_type = 'visium'`` by default.
We set this parameter here explicitly for clarity.
``n_rings`` should be used only for Visium datasets.
It specifies for each spot how many hexagonal rings of spots around
will be considered neighbors.

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: default

    sq.gr.spatial_neighbors(adata, n_rings=2, coord_type="grid", n_neighs=6)








.. GENERATED FROM PYTHON SOURCE LINES 35-39

The function builds a spatial graph and saves its adjacency matrix
to ``adata.obsp['spatial_connectivities']`` and weighted adjacency matrix to
``adata.obsp['spatial_distances']`` by default.
Note that it can also build a a graph from a square grid, just set ``n_neighs = 4``.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    adata.obsp["spatial_connectivities"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <2800x2800 sparse matrix of type '<class 'numpy.float64'>'
    	with 48240 stored elements in Compressed Sparse Row format>



.. GENERATED FROM PYTHON SOURCE LINES 42-44

The weights of the weighted adjacency matrix are ordinal numbers of hexagonal rings
in the case of ``coord_type = 'visium'``.

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    adata.obsp["spatial_distances"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <2800x2800 sparse matrix of type '<class 'numpy.float64'>'
    	with 48240 stored elements in Compressed Sparse Row format>



.. GENERATED FROM PYTHON SOURCE LINES 47-48

We can visualize the neighbors of a point to better visualize what `n_rings` mean:

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: default

    _, idx = adata.obsp["spatial_connectivities"][420, :].nonzero()
    idx = np.append(idx, 420)
    sc.pl.spatial(
        adata[idx, :],
        neighbors_key="spatial_neighbors",
        edges=True,
        edges_width=1,
        img_key=None,
    )




.. image:: /auto_examples/graph/images/sphx_glr_compute_spatial_neighbors_001.png
    :alt: compute spatial neighbors
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Next, we show how to compute the spatial neighbors graph for a non-grid dataset.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    adata = sq.datasets.imc()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/1.50M [00:00<?, ?B/s]      4%|3         | 56.0k/1.50M [00:00<00:03, 438kB/s]      9%|9         | 144k/1.50M [00:00<00:02, 579kB/s]      36%|###5      | 552k/1.50M [00:00<00:00, 1.72MB/s]    100%|##########| 1.50M/1.50M [00:00<00:00, 3.33MB/s]

    AnnData object with n_obs × n_vars = 4668 × 34
        obs: 'cell type'
        uns: 'cell type_colors'
        obsm: 'spatial'



.. GENERATED FROM PYTHON SOURCE LINES 64-68

We use the same function for this with ``coord_type = 'generic'``.
``n_neighs`` and ``radius`` can be used for non-Visium datasets.
``n_neighs`` specifies a fixed number of the closest spots for each spot as neighbors.
Alternatively, ``delaunay = True`` can be used, for a Delaunay triangulation graph.

.. GENERATED FROM PYTHON SOURCE LINES 68-81

.. code-block:: default

    sq.gr.spatial_neighbors(adata, n_neighs=10, coord_type="generic")
    _, idx = adata.obsp["spatial_connectivities"][420, :].nonzero()
    idx = np.append(idx, 420)
    sc.pl.spatial(
        adata[idx, :],
        color="cell type",
        neighbors_key="spatial_neighbors",
        spot_size=1,
        edges=True,
        edges_width=1,
        img_key=None,
    )




.. image:: /auto_examples/graph/images/sphx_glr_compute_spatial_neighbors_002.png
    :alt: cell type
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 82-84

We use the same function for this with ``coord_type = 'generic'`` and ``delaunay = True``.
You can appreciate that the neighbor graph is slightly different than before.

.. GENERATED FROM PYTHON SOURCE LINES 84-97

.. code-block:: default

    sq.gr.spatial_neighbors(adata, delaunay=True, coord_type="generic")
    _, idx = adata.obsp["spatial_connectivities"][420, :].nonzero()
    idx = np.append(idx, 420)
    sc.pl.spatial(
        adata[idx, :],
        color="cell type",
        neighbors_key="spatial_neighbors",
        spot_size=1,
        edges=True,
        edges_width=1,
        img_key=None,
    )




.. image:: /auto_examples/graph/images/sphx_glr_compute_spatial_neighbors_003.png
    :alt: cell type
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-100

In order to get all spots within a specified radius (in units of the spatial coordinates)
from each spot as neighbors, the parameter ``radius`` should be used.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    sq.gr.spatial_neighbors(adata, radius=0.3, coord_type="generic")

    adata.obsp["spatial_connectivities"]
    adata.obsp["spatial_distances"]




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <4668x4668 sparse matrix of type '<class 'numpy.float64'>'
    	with 0 stored elements in Compressed Sparse Row format>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.377 seconds)

**Estimated memory usage:**  293 MB


.. _sphx_glr_download_auto_examples_graph_compute_spatial_neighbors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_spatial_neighbors.py <compute_spatial_neighbors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_spatial_neighbors.ipynb <compute_spatial_neighbors.ipynb>`
