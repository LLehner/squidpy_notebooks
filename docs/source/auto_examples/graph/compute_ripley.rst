
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_ripley.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/graph/compute_ripley.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_ripley.py:

Compute Ripley's statistics
---------------------------

This example shows how to compute the Ripley's L function.

The Ripley's L function is a descriptive statistics generally used
to determine whether points have a random, dispersed or clustered distribution
pattern at certain scale.
The Ripley's L is a variance-normalized version of the Ripley's K statistic.

.. seealso::

    See :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for
    another score to describe spatial patterns with :func:`squidpy.gr.co_occurrence`.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default

    import scanpy as sc
    import squidpy as sq

    adata = sq.datasets.slideseqv2()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/251M [00:00<?, ?B/s]      0%|          | 56.0k/251M [00:00<10:41, 410kB/s]      0%|          | 176k/251M [00:00<06:26, 681kB/s]       0%|          | 720k/251M [00:00<02:01, 2.17MB/s]      1%|1         | 2.84M/251M [00:00<00:34, 7.57MB/s]      3%|3         | 8.58M/251M [00:00<00:12, 20.1MB/s]      6%|5         | 14.3M/251M [00:00<00:08, 27.6MB/s]      8%|7         | 20.1M/251M [00:00<00:07, 32.7MB/s]     10%|#         | 25.9M/251M [00:01<00:06, 36.1MB/s]     13%|#2        | 31.9M/251M [00:01<00:05, 38.6MB/s]     15%|#5        | 37.7M/251M [00:01<00:05, 39.9MB/s]     17%|#7        | 43.6M/251M [00:01<00:05, 41.0MB/s]     20%|#9        | 49.5M/251M [00:01<00:05, 41.8MB/s]     22%|##2       | 55.4M/251M [00:01<00:04, 42.3MB/s]     24%|##4       | 61.3M/251M [00:01<00:04, 42.7MB/s]     27%|##6       | 67.2M/251M [00:02<00:04, 43.0MB/s]     29%|##9       | 73.1M/251M [00:02<00:04, 42.4MB/s]     31%|###1      | 78.9M/251M [00:02<00:04, 43.4MB/s]     34%|###3      | 84.8M/251M [00:02<00:04, 43.3MB/s]     36%|###5      | 90.3M/251M [00:02<00:03, 46.8MB/s]     37%|###7      | 93.4M/251M [00:02<00:03, 41.7MB/s]     39%|###9      | 98.8M/251M [00:02<00:03, 45.7MB/s]     41%|####      | 102M/251M [00:02<00:03, 41.5MB/s]      43%|####2     | 108M/251M [00:03<00:03, 45.5MB/s]     44%|####4     | 111M/251M [00:03<00:03, 41.4MB/s]     46%|####6     | 116M/251M [00:03<00:03, 44.7MB/s]     48%|####7     | 120M/251M [00:03<00:03, 41.9MB/s]     50%|####9     | 125M/251M [00:03<00:02, 44.9MB/s]     51%|#####1    | 129M/251M [00:03<00:03, 42.2MB/s]     53%|#####3    | 133M/251M [00:03<00:02, 43.6MB/s]     55%|#####4    | 138M/251M [00:03<00:02, 42.4MB/s]     56%|#####6    | 142M/251M [00:03<00:02, 43.0MB/s]     58%|#####8    | 146M/251M [00:04<00:02, 42.9MB/s]     60%|#####9    | 150M/251M [00:04<00:02, 42.8MB/s]     62%|######1   | 155M/251M [00:04<00:02, 43.2MB/s]     63%|######3   | 159M/251M [00:04<00:02, 42.5MB/s]     65%|######5   | 164M/251M [00:04<00:02, 43.1MB/s]     67%|######6   | 168M/251M [00:04<00:02, 43.1MB/s]     69%|######8   | 172M/251M [00:04<00:01, 42.5MB/s]     70%|#######   | 177M/251M [00:04<00:01, 42.9MB/s]     72%|#######2  | 181M/251M [00:04<00:01, 42.7MB/s]     74%|#######3  | 185M/251M [00:04<00:01, 43.2MB/s]     76%|#######5  | 190M/251M [00:05<00:01, 42.3MB/s]     77%|#######7  | 194M/251M [00:05<00:01, 42.0MB/s]     79%|#######8  | 198M/251M [00:05<00:01, 42.7MB/s]     81%|########  | 203M/251M [00:05<00:01, 42.7MB/s]     82%|########2 | 207M/251M [00:05<00:01, 43.0MB/s]     84%|########3 | 211M/251M [00:05<00:00, 42.3MB/s]     86%|########5 | 216M/251M [00:05<00:00, 43.4MB/s]     87%|########7 | 220M/251M [00:05<00:00, 42.2MB/s]     89%|########9 | 225M/251M [00:05<00:00, 43.9MB/s]     91%|######### | 228M/251M [00:06<00:00, 41.4MB/s]     93%|#########2| 234M/251M [00:06<00:00, 44.1MB/s]     94%|#########4| 237M/251M [00:06<00:00, 41.8MB/s]     96%|#########6| 242M/251M [00:06<00:00, 44.2MB/s]     98%|#########7| 246M/251M [00:06<00:00, 41.8MB/s]    100%|#########9| 251M/251M [00:06<00:00, 44.5MB/s]    100%|##########| 251M/251M [00:06<00:00, 39.9MB/s]

    AnnData object with n_obs × n_vars = 41786 × 4000
        obs: 'barcode', 'x', 'y', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_MT', 'log1p_total_counts_MT', 'pct_counts_MT', 'n_counts', 'leiden', 'cluster'
        var: 'MT', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'spatial_neighbors', 'umap'
        obsm: 'X_pca', 'X_umap', 'deconvolution_results', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances', 'spatial_connectivities', 'spatial_distances'



.. GENERATED FROM PYTHON SOURCE LINES 25-27

We can compute the Ripley's L function with :func:`squidpy.gr.ripley`.
Results can be visualized with :func:`squidpy.pl.ripley`.

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default

    mode = "L"
    sq.gr.ripley(adata, cluster_key="cluster", mode=mode)
    sq.pl.ripley(adata, cluster_key="cluster", mode=mode)




.. image-sg:: /auto_examples/graph/images/sphx_glr_compute_ripley_001.png
   :alt: Ripley's L
   :srcset: /auto_examples/graph/images/sphx_glr_compute_ripley_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 32-34

We can further visualize tissue organization in spatial coordinates
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=20)




.. image-sg:: /auto_examples/graph/images/sphx_glr_compute_ripley_002.png
   :alt: cluster
   :srcset: /auto_examples/graph/images/sphx_glr_compute_ripley_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-39

There are also 2 other Ripley's statistics available (that are closely related):
``mode = 'F'`` and ``mode = 'G'``.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  39.694 seconds)

**Estimated memory usage:**  1868 MB


.. _sphx_glr_download_auto_examples_graph_compute_ripley.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_ripley.py <compute_ripley.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_ripley.ipynb <compute_ripley.ipynb>`
