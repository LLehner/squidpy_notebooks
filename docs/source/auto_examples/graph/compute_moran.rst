
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_moran.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/graph/compute_moran.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_moran.py:

Compute Moran's I score
-----------------------

This example shows how to compute the Moran's I global spatial autocorrelation statistics.

The Moran's I global spatial autocorrelation statistics evaluates whether
features (i.e. genes) shows a pattern that is clustered, dispersed or random
in the tissue are under consideration.

.. seealso::

    - See :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` and
      :ref:`sphx_glr_auto_examples_graph_compute_ripley_k.py` for other scores to describe spatial patterns.
    - See :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for general usage of
      :func:`squidpy.gr.spatial_neighbors`.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    import scanpy as sc
    import squidpy as sq

    adata = sq.datasets.visium_hne_adata()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/314M [00:00<?, ?B/s]      0%|          | 56.0k/314M [00:00<13:13, 415kB/s]      0%|          | 176k/314M [00:00<07:59, 686kB/s]       0%|          | 672k/314M [00:00<02:42, 2.02MB/s]      1%|          | 2.61M/314M [00:00<00:46, 6.98MB/s]      3%|2         | 8.14M/314M [00:00<00:16, 19.3MB/s]      4%|4         | 14.0M/314M [00:00<00:11, 27.7MB/s]      6%|6         | 19.9M/314M [00:00<00:09, 32.9MB/s]      8%|8         | 25.7M/314M [00:01<00:08, 36.3MB/s]     10%|#         | 31.6M/314M [00:01<00:07, 38.7MB/s]     12%|#1        | 37.5M/314M [00:01<00:07, 40.3MB/s]     14%|#3        | 43.4M/314M [00:01<00:06, 41.4MB/s]     16%|#5        | 49.3M/314M [00:01<00:06, 42.1MB/s]     18%|#7        | 55.2M/314M [00:01<00:06, 42.6MB/s]     19%|#9        | 61.1M/314M [00:01<00:06, 42.7MB/s]     21%|##1       | 67.1M/314M [00:02<00:06, 43.1MB/s]     23%|##3       | 73.0M/314M [00:02<00:05, 43.3MB/s]     25%|##5       | 78.9M/314M [00:02<00:05, 43.7MB/s]     27%|##7       | 84.8M/314M [00:02<00:05, 43.8MB/s]     29%|##8       | 90.7M/314M [00:02<00:05, 43.8MB/s]     31%|###       | 96.7M/314M [00:02<00:05, 44.0MB/s]     33%|###2      | 103M/314M [00:02<00:05, 44.1MB/s]      35%|###4      | 109M/314M [00:03<00:04, 44.1MB/s]     36%|###6      | 114M/314M [00:03<00:04, 48.2MB/s]     37%|###7      | 117M/314M [00:03<00:04, 42.5MB/s]     39%|###9      | 123M/314M [00:03<00:04, 43.1MB/s]     41%|####      | 129M/314M [00:03<00:04, 46.6MB/s]     42%|####2     | 132M/314M [00:03<00:04, 42.4MB/s]     44%|####3     | 137M/314M [00:03<00:04, 45.2MB/s]     45%|####4     | 141M/314M [00:03<00:04, 42.5MB/s]     46%|####6     | 146M/314M [00:03<00:03, 44.8MB/s]     48%|####7     | 150M/314M [00:04<00:04, 41.9MB/s]     49%|####9     | 154M/314M [00:04<00:03, 44.1MB/s]     50%|#####     | 158M/314M [00:04<00:03, 42.4MB/s]     52%|#####1    | 163M/314M [00:04<00:03, 44.4MB/s]     53%|#####3    | 167M/314M [00:04<00:03, 42.2MB/s]     55%|#####4    | 172M/314M [00:04<00:03, 43.6MB/s]     56%|#####6    | 176M/314M [00:04<00:03, 42.8MB/s]     57%|#####7    | 180M/314M [00:04<00:03, 43.9MB/s]     59%|#####8    | 185M/314M [00:04<00:03, 43.2MB/s]     60%|######    | 189M/314M [00:05<00:02, 44.1MB/s]     62%|######1   | 193M/314M [00:05<00:03, 41.9MB/s]     63%|######3   | 198M/314M [00:05<00:02, 44.3MB/s]     64%|######4   | 202M/314M [00:05<00:02, 42.5MB/s]     66%|######5   | 207M/314M [00:05<00:02, 44.6MB/s]     67%|######7   | 211M/314M [00:05<00:02, 42.7MB/s]     69%|######8   | 216M/314M [00:05<00:02, 44.8MB/s]     70%|######9   | 220M/314M [00:05<00:02, 42.8MB/s]     71%|#######1  | 225M/314M [00:05<00:02, 44.8MB/s]     73%|#######2  | 229M/314M [00:05<00:02, 42.8MB/s]     74%|#######4  | 233M/314M [00:06<00:01, 44.7MB/s]     76%|#######5  | 237M/314M [00:06<00:01, 42.9MB/s]     77%|#######7  | 242M/314M [00:06<00:01, 44.8MB/s]     78%|#######8  | 246M/314M [00:06<00:01, 43.1MB/s]     80%|#######9  | 251M/314M [00:06<00:01, 44.8MB/s]     81%|########1 | 255M/314M [00:06<00:01, 43.1MB/s]     83%|########2 | 260M/314M [00:06<00:01, 44.8MB/s]     84%|########4 | 264M/314M [00:06<00:01, 43.0MB/s]     86%|########5 | 269M/314M [00:06<00:01, 44.6MB/s]     87%|########6 | 273M/314M [00:07<00:01, 43.1MB/s]     88%|########8 | 277M/314M [00:07<00:00, 44.6MB/s]     90%|########9 | 282M/314M [00:07<00:00, 43.1MB/s]     91%|#########1| 286M/314M [00:07<00:00, 44.6MB/s]     92%|#########2| 290M/314M [00:07<00:00, 43.1MB/s]     94%|#########3| 295M/314M [00:07<00:00, 44.6MB/s]     95%|#########5| 299M/314M [00:07<00:00, 43.1MB/s]     97%|#########6| 304M/314M [00:07<00:00, 44.5MB/s]     98%|#########8| 308M/314M [00:07<00:00, 43.1MB/s]    100%|#########9| 313M/314M [00:07<00:00, 44.5MB/s]    100%|##########| 314M/314M [00:08<00:00, 41.0MB/s]

    AnnData object with n_obs × n_vars = 2688 × 18078
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_mt', 'log1p_total_counts_mt', 'pct_counts_mt', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'mt', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'rank_genes_groups', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 26-29

We can compute the Moran's I score with :func:`squidpy.gr.moran`.
We first need to compute a spatial graph with :func:`squidpy.gr.moran`.
We will also subset the number of genes to evaluate.

.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: default


    genes = adata[:, adata.var.highly_variable].var_names.values[:100]
    sq.gr.spatial_neighbors(adata)
    sq.gr.moran(
        adata,
        genes=genes,
        n_perms=100,
        n_jobs=1,
    )
    adata.uns["moranI"].head(10)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/libpysal/weights/weights.py:172: UserWarning: The weights matrix is not fully connected: 
     There are 3 disconnected components.
      warnings.warn(message)
      0%|          | 0/100 [00:00<?, ?/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_sim</th>
          <th>VI_sim</th>
          <th>pval_sim_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3110035E14Rik</th>
          <td>0.665132</td>
          <td>0.0</td>
          <td>0.000125</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Resp18</th>
          <td>0.649582</td>
          <td>0.0</td>
          <td>0.000130</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>1500015O10Rik</th>
          <td>0.605940</td>
          <td>0.0</td>
          <td>0.000091</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Ecel1</th>
          <td>0.570304</td>
          <td>0.0</td>
          <td>0.000127</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>2010300C02Rik</th>
          <td>0.539469</td>
          <td>0.0</td>
          <td>0.000123</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Scg2</th>
          <td>0.476060</td>
          <td>0.0</td>
          <td>0.000179</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Ogfrl1</th>
          <td>0.457945</td>
          <td>0.0</td>
          <td>0.000123</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Itm2c</th>
          <td>0.451842</td>
          <td>0.0</td>
          <td>0.000124</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Tuba4a</th>
          <td>0.451810</td>
          <td>0.0</td>
          <td>0.000140</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Satb2</th>
          <td>0.429162</td>
          <td>0.0</td>
          <td>0.000119</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-42

We can visualize some of those genes with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 42-43

.. code-block:: default

    sc.pl.spatial(adata, color=["Resp18", "Tuba4a"])



.. image:: /auto_examples/graph/images/sphx_glr_compute_moran_001.png
    :alt: Resp18, Tuba4a
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  27.985 seconds)

**Estimated memory usage:**  473 MB


.. _sphx_glr_download_auto_examples_graph_compute_moran.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_moran.py <compute_moran.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_moran.ipynb <compute_moran.ipynb>`
