
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_show.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scverse/squidpy_notebooks/main?filepath=docs/source/auto_examples/image/compute_show.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_show.py:

Show layers of the ImageContainer
---------------------------------

This example shows how to use :meth:`squidpy.im.ImageContainer.show`.

This function is useful to visualize statically different layers of the
:class:`squidpy.im.ImageContainer` class.

.. seealso::

    - See :ref:`sphx_glr_auto_examples_image_compute_crops.py` and
      :ref:`sphx_glr_auto_examples_image_compute_smooth.py` for additional
      examples on methods of the :class:`squidpy.im.ImageContainer`.

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: default

    import squidpy as sq








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Load the Mibitof dataset.

.. GENERATED FROM PYTHON SOURCE LINES 21-23

.. code-block:: default

    adata = sq.datasets.mibitof()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/19.3M [00:00<?, ?B/s]      0%|          | 56.0k/19.3M [00:00<00:47, 430kB/s]      1%|          | 160k/19.3M [00:00<00:31, 639kB/s]       3%|3         | 616k/19.3M [00:00<00:10, 1.92MB/s]     12%|#2        | 2.37M/19.3M [00:00<00:02, 6.56MB/s]     39%|###9      | 7.59M/19.3M [00:00<00:00, 18.7MB/s]     69%|######8   | 13.3M/19.3M [00:00<00:00, 27.3MB/s]     98%|#########8| 19.0M/19.3M [00:00<00:00, 32.8MB/s]    100%|##########| 19.3M/19.3M [00:00<00:00, 21.2MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 24-25

We can briefly visualize the data to understand the type of images we have.

.. GENERATED FROM PYTHON SOURCE LINES 25-34

.. code-block:: default

    sq.pl.spatial_segment(
        adata,
        library_id=["point16", "point23", "point8"],
        seg_cell_id="cell_id",
        color="Cluster",
        library_key="library_id",
        title=["point16", "point23", "point8"],
    )




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_show_001.png
   :alt: point16, point23, point8
   :srcset: /auto_examples/image/images/sphx_glr_compute_show_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 35-38

We have three different tissue samples. We also have segmentation masks for each tissue sample.
Let's extract the image from the :class:`anndata.AnnData` object and create a
:class:`squidpy.im.ImageContainer` object.

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default

    imgs = []
    for library_id in adata.uns["spatial"].keys():
        img = sq.im.ImageContainer(adata.uns["spatial"][library_id]["images"]["hires"], library_id=library_id)
        img.add_img(adata.uns["spatial"][library_id]["images"]["segmentation"], library_id=library_id, layer="segmentation")
        img["segmentation"].attrs["segmentation"] = True
        imgs.append(img)
    img = sq.im.ImageContainer.concat(imgs)








.. GENERATED FROM PYTHON SOURCE LINES 47-48

We can visualize each image of the object with :meth:`squidpy.im.ImageContainer.show`.

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    img.show("image")




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_show_002.png
   :alt: image, library_id:point16, image, library_id:point23, image, library_id:point8
   :srcset: /auto_examples/image/images/sphx_glr_compute_show_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-52

:meth:`squidpy.im.ImageContainer.show` also allows to overlay the results of segmentation.

.. GENERATED FROM PYTHON SOURCE LINES 52-53

.. code-block:: default

    img.show("image", segmentation_layer="segmentation", segmentation_alpha=0.5)



.. image-sg:: /auto_examples/image/images/sphx_glr_compute_show_003.png
   :alt: image, library_id:point16, image, library_id:point23, image, library_id:point8
   :srcset: /auto_examples/image/images/sphx_glr_compute_show_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.429 seconds)

**Estimated memory usage:**  370 MB


.. _sphx_glr_download_auto_examples_image_compute_show.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_show.py <compute_show.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_show.ipynb <compute_show.ipynb>`
