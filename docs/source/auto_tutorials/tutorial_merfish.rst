
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_merfish.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_merfish.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_merfish.py:

Analyze Merfish data
========================

This tutorial shows how to apply Squidpy for the analysis of Merfish data.

The data used here was obtained from :cite:`Moffitt2018-me`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_slideseqv2.py` and
    :ref:`sphx_glr_auto_tutorials_tutorial_seqfish.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 22-33

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.merfish()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.3 numpy==1.21.6 scipy==1.8.0 pandas==1.4.2 scikit-learn==1.0.2 statsmodels==0.13.2 python-igraph==0.9.10 pynndescent==0.5.6
    squidpy==1.1.2
      0%|          | 0.00/49.2M [00:00<?, ?B/s]      0%|          | 56.0k/49.2M [00:00<02:08, 400kB/s]      0%|          | 240k/49.2M [00:00<00:54, 941kB/s]       2%|2         | 1.03M/49.2M [00:00<00:15, 3.19MB/s]      8%|8         | 4.17M/49.2M [00:00<00:04, 11.1MB/s]     20%|##        | 10.0M/49.2M [00:00<00:01, 22.6MB/s]     32%|###2      | 15.9M/49.2M [00:00<00:01, 29.6MB/s]     44%|####3     | 21.6M/49.2M [00:01<00:00, 33.6MB/s]     56%|#####5    | 27.4M/49.2M [00:01<00:00, 36.4MB/s]     68%|######7   | 33.3M/49.2M [00:01<00:00, 38.4MB/s]     79%|#######9  | 39.0M/49.2M [00:01<00:00, 39.6MB/s]     91%|#########1| 45.0M/49.2M [00:01<00:00, 40.8MB/s]    100%|##########| 49.2M/49.2M [00:01<00:00, 31.1MB/s]

    AnnData object with n_obs × n_vars = 73655 × 161
        obs: 'Cell_ID', 'Animal_ID', 'Animal_sex', 'Behavior', 'Bregma', 'Centroid_X', 'Centroid_Y', 'Cell_class', 'Neuron_cluster_ID', 'batch'
        uns: 'Cell_class_colors'
        obsm: 'spatial', 'spatial3d'



.. GENERATED FROM PYTHON SOURCE LINES 34-38

This datasets consists of consecutive slices from the mouse hypothalamic preoptic region.
It represents an interesting example of how to work with 3D spatial data in Squidpy.
Let's start with visualization: we can either visualize the 3D stack of slides
using :func:`scanpy.pl.embedding`:

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    sc.pl.embedding(adata, basis="spatial3d", projection="3d", color="Cell_class")




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_001.png
   :alt: Cell_class
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-43

Or visualize a single slide with :func:`scanpy.pl.spatial`. Here the slide identifier
is stored in `adata.obs["Bregma"]`, see original paper for definition.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default


    sc.pl.spatial(adata[adata.obs.Bregma == -9], color="Cell_class", spot_size=0.01)




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_002.png
   :alt: Cell_class
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-60

Neighborhood enrichment analysis in 3D
--------------------------------------
It is important to consider whether the analysis should be performed on the 3D
spatial coordinates or the 2D coordinates for a single slice. Functions that
make use of the spatial graph can already support 3D coordinates, but it is important
to consider that the z-stack coordinate is in the same unit metrics as the x, y coordinates.
Let's start with the neighborhood enrichment score. You can read more on the function
in the docs at :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py`.
First, we need to compute a neighbor graph with :func:`squidpy.gr.spatial_neighbors`.
If we want to compute the neighbor graph on the 3D coordinate space,
we need to specify ``spatial_key = "spatial3d"``.
Then we can use :func:`squidpy.gr.nhood_enrichment` to compute the score, and visualize
it with :func:`squidpy.gr.nhood_enrichment`.

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic", spatial_key="spatial3d")
    sq.gr.nhood_enrichment(adata, cluster_key="Cell_class")
    sq.pl.nhood_enrichment(adata, cluster_key="Cell_class", method="single", cmap="inferno", vmin=-50, vmax=100)




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_003.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      1%|          | 9/1000 [00:00<00:11, 87.41/s]      3%|3         | 30/1000 [00:00<00:06, 158.02/s]      5%|4         | 48/1000 [00:00<00:06, 155.49/s]      6%|6         | 64/1000 [00:00<00:09, 103.09/s]      8%|7         | 77/1000 [00:00<00:10, 92.14/s]      11%|#         | 107/1000 [00:00<00:06, 140.64/s]     15%|#4        | 147/1000 [00:00<00:04, 204.53/s]     18%|#7        | 178/1000 [00:01<00:03, 231.79/s]     20%|##        | 205/1000 [00:01<00:04, 194.51/s]     23%|##2       | 228/1000 [00:01<00:03, 194.06/s]     25%|##5       | 250/1000 [00:01<00:04, 156.76/s]     29%|##9       | 291/1000 [00:01<00:03, 209.47/s]     34%|###3      | 338/1000 [00:01<00:02, 269.69/s]     37%|###7      | 371/1000 [00:01<00:02, 281.70/s]     40%|####      | 405/1000 [00:01<00:02, 296.05/s]     44%|####3     | 438/1000 [00:02<00:02, 193.12/s]     46%|####6     | 464/1000 [00:02<00:02, 182.07/s]     49%|####8     | 487/1000 [00:02<00:03, 157.50/s]     52%|#####1    | 518/1000 [00:02<00:02, 186.06/s]     54%|#####4    | 541/1000 [00:02<00:02, 191.27/s]     56%|#####6    | 564/1000 [00:03<00:02, 155.09/s]     58%|#####8    | 583/1000 [00:03<00:02, 158.58/s]     60%|######    | 602/1000 [00:03<00:03, 125.23/s]     64%|######3   | 635/1000 [00:03<00:02, 164.33/s]     66%|######5   | 656/1000 [00:03<00:01, 172.99/s]     68%|######7   | 677/1000 [00:03<00:01, 178.43/s]     71%|#######   | 707/1000 [00:03<00:01, 206.15/s]     74%|#######4  | 740/1000 [00:03<00:01, 237.57/s]     77%|#######7  | 771/1000 [00:04<00:00, 256.53/s]     80%|########  | 803/1000 [00:04<00:00, 273.44/s]     83%|########3 | 832/1000 [00:04<00:00, 256.88/s]     87%|########6 | 868/1000 [00:04<00:00, 282.99/s]     90%|########9 | 898/1000 [00:04<00:00, 231.59/s]     92%|#########2| 924/1000 [00:04<00:00, 199.29/s]    100%|##########| 1000/1000 [00:04<00:00, 207.52/s]




.. GENERATED FROM PYTHON SOURCE LINES 65-68

We can visualize some of the co-enriched clusters with :func:`scanpy.pl.embedding`.
We will set `na_colors=(1,1,1,0)` to make transparent the other observations,
in order to better visualize the clusters of interests across z-stacks.

.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. code-block:: default

    sc.pl.embedding(
        adata,
        basis="spatial3d",
        groups=["OD Mature 1", "OD Mature 2", "OD Mature 4"],
        na_color=(1, 1, 1, 0),
        projection="3d",
        color="Cell_class",
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_004.png
   :alt: Cell_class
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:1171: FutureWarning: Categorical.replace is deprecated and will be removed in a future version. Use Series.replace directly instead.
      values = values.replace(values.categories.difference(groups), np.nan)




.. GENERATED FROM PYTHON SOURCE LINES 78-80

We can also visualize gene expression in 3D coordinates. Let's perform differential
expression testing with :func:`scanpy.tl.rank_genes_groups` and visualize the results

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    sc.tl.rank_genes_groups(adata, groupby="Cell_class")
    sc.pl.rank_genes_groups(adata, groupby="Cell_class")




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_005.png
   :alt: Ambiguous vs. rest, Astrocyte vs. rest, Endothelial 1 vs. rest, Endothelial 2 vs. rest, Endothelial 3 vs. rest, Ependymal vs. rest, Excitatory vs. rest, Inhibitory vs. rest, Microglia vs. rest, OD Immature 1 vs. rest, OD Immature 2 vs. rest, OD Mature 1 vs. rest, OD Mature 2 vs. rest, OD Mature 3 vs. rest, OD Mature 4 vs. rest, Pericytes vs. rest
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-85

and the expression in 3D.

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: default

    sc.pl.embedding(adata, basis="spatial3d", projection="3d", color=["Gad1", "Mlc1"])




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_006.png
   :alt: Gad1, Mlc1
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-91

If the same analysis should be performed on a single slice, then it is advisable to
copy the sample of interest in a new :class:`anndata.AnnData` and use it as
a standard 2D spatial data object.

.. GENERATED FROM PYTHON SOURCE LINES 91-101

.. code-block:: default

    adata_slice = adata[adata.obs.Bregma == -9].copy()
    sq.gr.spatial_neighbors(adata_slice, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="Cell_class")
    sc.pl.spatial(
        adata_slice,
        color="Cell_class",
        groups=["Ependymal", "Pericytes", "Endothelial 2"],
        spot_size=0.01,
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_007.png
   :alt: Cell_class
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      1%|          | 9/1000 [00:00<00:11, 88.06/s]      3%|3         | 33/1000 [00:00<00:05, 173.88/s]      6%|5         | 56/1000 [00:00<00:04, 194.47/s]      8%|7         | 77/1000 [00:00<00:04, 199.37/s]     10%|9         | 97/1000 [00:00<00:06, 144.47/s]     13%|#2        | 129/1000 [00:00<00:04, 189.54/s]     15%|#5        | 151/1000 [00:00<00:04, 193.89/s]     20%|#9        | 196/1000 [00:00<00:03, 263.43/s]     22%|##2       | 225/1000 [00:01<00:03, 225.92/s]     25%|##5       | 250/1000 [00:01<00:03, 202.39/s]     28%|##8       | 283/1000 [00:01<00:03, 230.63/s]     31%|###       | 308/1000 [00:01<00:03, 227.61/s]     33%|###3      | 333/1000 [00:01<00:03, 218.47/s]     36%|###5      | 356/1000 [00:01<00:03, 199.19/s]     38%|###7      | 377/1000 [00:01<00:03, 163.20/s]     40%|###9      | 398/1000 [00:02<00:03, 164.33/s]     43%|####2     | 429/1000 [00:02<00:02, 197.87/s]     45%|####5     | 452/1000 [00:02<00:02, 203.93/s]     49%|####9     | 490/1000 [00:02<00:02, 248.49/s]     52%|#####2    | 525/1000 [00:02<00:01, 274.91/s]     55%|#####5    | 554/1000 [00:02<00:01, 242.04/s]     58%|#####8    | 580/1000 [00:02<00:01, 241.69/s]     62%|######1   | 616/1000 [00:02<00:01, 270.97/s]     64%|######4   | 645/1000 [00:02<00:01, 248.35/s]     67%|######7   | 671/1000 [00:03<00:01, 201.34/s]     69%|######9   | 694/1000 [00:03<00:01, 169.35/s]     73%|#######2  | 728/1000 [00:03<00:01, 202.70/s]     75%|#######5  | 751/1000 [00:03<00:01, 201.24/s]     77%|#######7  | 773/1000 [00:03<00:01, 199.97/s]     82%|########2 | 822/1000 [00:03<00:00, 272.20/s]     85%|########5 | 852/1000 [00:03<00:00, 229.35/s]     88%|########7 | 878/1000 [00:04<00:00, 221.44/s]     90%|######### | 902/1000 [00:04<00:00, 183.88/s]    100%|##########| 1000/1000 [00:04<00:00, 229.37/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:1171: FutureWarning: Categorical.replace is deprecated and will be removed in a future version. Use Series.replace directly instead.
      values = values.replace(values.categories.difference(groups), np.nan)




.. GENERATED FROM PYTHON SOURCE LINES 102-113

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 113-120

.. code-block:: default

    sq.gr.spatial_autocorr(adata_slice, mode="moran")
    adata_slice.uns["moranI"].head()
    sc.pl.spatial(
        adata_slice,
        color=["Cd24a", "Necab1", "Mlc1"],
        spot_size=0.01,
    )



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_merfish_008.png
   :alt: Cd24a, Necab1, Mlc1
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_merfish_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/scanpy/metrics/_gearys_c.py:293: UserWarning: 1 variables were constant, will return nan for these.
      warnings.warn(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  23.356 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_auto_tutorials_tutorial_merfish.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_merfish.py <tutorial_merfish.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_merfish.ipynb <tutorial_merfish.ipynb>`
