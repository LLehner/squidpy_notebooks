
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.3 numpy==1.21.6 scipy==1.8.0 pandas==1.4.2 scikit-learn==1.0.2 statsmodels==0.13.2 python-igraph==0.9.10 pynndescent==0.5.6
    squidpy==1.1.2
      0%|          | 0.00/173M [00:00<?, ?B/s]      0%|          | 56.0k/173M [00:00<07:25, 408kB/s]      0%|          | 176k/173M [00:00<04:28, 676kB/s]       0%|          | 632k/173M [00:00<01:36, 1.87MB/s]      1%|1         | 2.45M/173M [00:00<00:27, 6.45MB/s]      4%|4         | 7.74M/173M [00:00<00:09, 18.2MB/s]      8%|7         | 13.7M/173M [00:00<00:06, 27.0MB/s]     11%|#1        | 19.5M/173M [00:00<00:04, 33.4MB/s]     14%|#4        | 24.3M/173M [00:01<00:04, 37.8MB/s]     16%|#6        | 28.1M/173M [00:01<00:04, 37.0MB/s]     19%|#9        | 33.3M/173M [00:01<00:03, 41.5MB/s]     21%|##1       | 37.0M/173M [00:01<00:03, 39.5MB/s]     24%|##4       | 42.1M/173M [00:01<00:03, 43.3MB/s]     27%|##6       | 45.9M/173M [00:01<00:03, 40.6MB/s]     29%|##9       | 51.0M/173M [00:01<00:02, 44.2MB/s]     32%|###1      | 54.8M/173M [00:01<00:02, 41.7MB/s]     35%|###4      | 59.8M/173M [00:01<00:02, 44.6MB/s]     37%|###6      | 63.6M/173M [00:02<00:02, 41.7MB/s]     40%|###9      | 68.6M/173M [00:02<00:02, 44.6MB/s]     42%|####1     | 72.5M/173M [00:02<00:02, 42.0MB/s]     45%|####4     | 77.5M/173M [00:02<00:02, 45.1MB/s]     47%|####6     | 81.3M/173M [00:02<00:02, 41.9MB/s]     50%|####9     | 86.5M/173M [00:02<00:02, 45.3MB/s]     52%|#####2    | 90.2M/173M [00:02<00:02, 41.9MB/s]     55%|#####5    | 95.3M/173M [00:02<00:01, 45.2MB/s]     57%|#####7    | 99.0M/173M [00:02<00:01, 41.8MB/s]     60%|######    | 104M/173M [00:02<00:01, 45.1MB/s]      62%|######2   | 108M/173M [00:03<00:01, 41.8MB/s]     65%|######5   | 113M/173M [00:03<00:01, 45.4MB/s]     67%|######7   | 117M/173M [00:03<00:01, 41.6MB/s]     70%|#######   | 121M/173M [00:03<00:01, 44.4MB/s]     72%|#######2  | 125M/173M [00:03<00:01, 41.4MB/s]     75%|#######5  | 130M/173M [00:03<00:01, 44.6MB/s]     77%|#######7  | 134M/173M [00:03<00:00, 41.6MB/s]     80%|########  | 139M/173M [00:03<00:00, 45.1MB/s]     83%|########2 | 143M/173M [00:03<00:00, 41.9MB/s]     85%|########5 | 148M/173M [00:04<00:00, 44.2MB/s]     88%|########7 | 152M/173M [00:04<00:00, 42.1MB/s]     90%|######### | 156M/173M [00:04<00:00, 43.0MB/s]     93%|#########2| 161M/173M [00:04<00:00, 42.7MB/s]     95%|#########5| 165M/173M [00:04<00:00, 44.4MB/s]     98%|#########7| 169M/173M [00:04<00:00, 42.7MB/s]    100%|##########| 173M/173M [00:04<00:00, 38.7MB/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1830: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
      utils.warn_names_duplicates("var")




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=1)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-58

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:00<01:45,  9.48/s]      1%|          | 7/1000 [00:00<00:26, 37.22/s]      1%|1         | 13/1000 [00:00<00:21, 46.57/s]      2%|1         | 19/1000 [00:00<00:19, 51.02/s]      2%|2         | 25/1000 [00:00<00:18, 53.49/s]      3%|3         | 31/1000 [00:00<00:17, 54.95/s]      4%|3         | 37/1000 [00:00<00:17, 55.89/s]      4%|4         | 44/1000 [00:00<00:16, 58.42/s]      5%|5         | 51/1000 [00:00<00:15, 59.87/s]      6%|5         | 58/1000 [00:01<00:15, 60.78/s]      6%|6         | 65/1000 [00:01<00:15, 62.01/s]      7%|7         | 72/1000 [00:01<00:15, 61.68/s]      8%|7         | 79/1000 [00:01<00:15, 60.50/s]      9%|8         | 86/1000 [00:01<00:15, 59.67/s]      9%|9         | 93/1000 [00:01<00:14, 60.66/s]     10%|#         | 100/1000 [00:01<00:15, 59.47/s]     11%|#         | 106/1000 [00:01<00:15, 59.28/s]     11%|#1        | 113/1000 [00:01<00:14, 59.70/s]     12%|#2        | 120/1000 [00:02<00:14, 60.20/s]     13%|#2        | 127/1000 [00:02<00:14, 60.58/s]     13%|#3        | 134/1000 [00:02<00:14, 61.57/s]     14%|#4        | 141/1000 [00:02<00:13, 62.37/s]     15%|#4        | 148/1000 [00:02<00:13, 62.49/s]     16%|#5        | 155/1000 [00:02<00:13, 61.29/s]     16%|#6        | 162/1000 [00:02<00:13, 60.33/s]     17%|#6        | 169/1000 [00:02<00:13, 59.78/s]     18%|#7        | 176/1000 [00:03<00:13, 59.25/s]     18%|#8        | 182/1000 [00:03<00:13, 59.03/s]     19%|#8        | 188/1000 [00:03<00:13, 58.69/s]     19%|#9        | 194/1000 [00:03<00:13, 58.46/s]     20%|##        | 200/1000 [00:03<00:13, 58.37/s]     21%|##        | 206/1000 [00:03<00:13, 58.31/s]     21%|##1       | 212/1000 [00:03<00:13, 58.41/s]     22%|##1       | 219/1000 [00:03<00:13, 58.40/s]     22%|##2       | 225/1000 [00:03<00:13, 58.32/s]     23%|##3       | 231/1000 [00:03<00:13, 58.36/s]     24%|##3       | 238/1000 [00:04<00:12, 60.18/s]     24%|##4       | 245/1000 [00:04<00:12, 61.52/s]     25%|##5       | 252/1000 [00:04<00:12, 62.32/s]     26%|##5       | 259/1000 [00:04<00:11, 62.63/s]     27%|##6       | 266/1000 [00:04<00:11, 63.11/s]     27%|##7       | 273/1000 [00:04<00:11, 63.00/s]     28%|##8       | 280/1000 [00:04<00:11, 63.14/s]     29%|##8       | 287/1000 [00:04<00:11, 63.24/s]     29%|##9       | 294/1000 [00:04<00:11, 63.31/s]     30%|###       | 301/1000 [00:05<00:11, 63.35/s]     31%|###       | 308/1000 [00:05<00:10, 63.37/s]     32%|###1      | 315/1000 [00:05<00:10, 63.54/s]     32%|###2      | 322/1000 [00:05<00:10, 63.34/s]     33%|###2      | 329/1000 [00:05<00:10, 63.67/s]     34%|###3      | 336/1000 [00:05<00:10, 64.22/s]     34%|###4      | 343/1000 [00:05<00:10, 64.00/s]     35%|###5      | 350/1000 [00:05<00:10, 64.17/s]     36%|###5      | 358/1000 [00:05<00:09, 64.29/s]     36%|###6      | 365/1000 [00:06<00:09, 65.65/s]     37%|###7      | 372/1000 [00:06<00:09, 66.18/s]     38%|###7      | 379/1000 [00:06<00:09, 62.70/s]     39%|###8      | 386/1000 [00:06<00:09, 62.73/s]     39%|###9      | 393/1000 [00:06<00:09, 62.74/s]     40%|####      | 400/1000 [00:06<00:09, 63.00/s]     41%|####      | 407/1000 [00:06<00:09, 63.53/s]     42%|####1     | 415/1000 [00:06<00:09, 63.26/s]     42%|####2     | 422/1000 [00:06<00:09, 62.24/s]     43%|####3     | 430/1000 [00:07<00:09, 62.41/s]     44%|####3     | 437/1000 [00:07<00:08, 64.27/s]     44%|####4     | 444/1000 [00:07<00:08, 62.22/s]     45%|####5     | 451/1000 [00:07<00:08, 62.82/s]     46%|####5     | 458/1000 [00:07<00:08, 63.40/s]     46%|####6     | 465/1000 [00:07<00:08, 63.72/s]     47%|####7     | 472/1000 [00:07<00:08, 63.90/s]     48%|####7     | 479/1000 [00:07<00:08, 64.07/s]     49%|####8     | 486/1000 [00:07<00:08, 63.01/s]     49%|####9     | 493/1000 [00:08<00:08, 61.81/s]     50%|#####     | 500/1000 [00:08<00:08, 60.73/s]     51%|#####     | 507/1000 [00:08<00:08, 59.88/s]     51%|#####1    | 514/1000 [00:08<00:07, 62.05/s]     52%|#####2    | 521/1000 [00:08<00:07, 60.96/s]     53%|#####2    | 529/1000 [00:08<00:07, 61.58/s]     54%|#####3    | 536/1000 [00:08<00:07, 61.67/s]     54%|#####4    | 543/1000 [00:08<00:07, 61.85/s]     55%|#####5    | 550/1000 [00:09<00:07, 59.13/s]     56%|#####5    | 556/1000 [00:09<00:07, 58.46/s]     56%|#####6    | 562/1000 [00:09<00:07, 57.53/s]     57%|#####6    | 568/1000 [00:09<00:07, 57.50/s]     57%|#####7    | 575/1000 [00:09<00:07, 58.48/s]     58%|#####8    | 582/1000 [00:09<00:07, 59.23/s]     59%|#####8    | 589/1000 [00:09<00:06, 60.31/s]     60%|#####9    | 596/1000 [00:09<00:06, 61.24/s]     60%|######    | 603/1000 [00:09<00:06, 61.99/s]     61%|######1   | 610/1000 [00:10<00:06, 61.85/s]     62%|######1   | 617/1000 [00:10<00:06, 62.53/s]     62%|######2   | 624/1000 [00:10<00:05, 62.96/s]     63%|######3   | 631/1000 [00:10<00:05, 63.55/s]     64%|######3   | 638/1000 [00:10<00:05, 63.41/s]     64%|######4   | 645/1000 [00:10<00:05, 63.52/s]     65%|######5   | 652/1000 [00:10<00:05, 63.63/s]     66%|######5   | 659/1000 [00:10<00:05, 63.90/s]     67%|######6   | 667/1000 [00:10<00:05, 63.78/s]     68%|######7   | 675/1000 [00:11<00:05, 63.73/s]     68%|######8   | 683/1000 [00:11<00:04, 63.68/s]     69%|######9   | 690/1000 [00:11<00:04, 63.55/s]     70%|######9   | 698/1000 [00:11<00:04, 63.77/s]     70%|#######   | 705/1000 [00:11<00:04, 61.27/s]     71%|#######1  | 712/1000 [00:11<00:04, 60.08/s]     72%|#######2  | 720/1000 [00:11<00:04, 60.58/s]     73%|#######2  | 728/1000 [00:11<00:04, 61.37/s]     74%|#######3  | 735/1000 [00:12<00:04, 61.55/s]     74%|#######4  | 743/1000 [00:12<00:04, 61.98/s]     75%|#######5  | 750/1000 [00:12<00:03, 63.50/s]     76%|#######5  | 757/1000 [00:12<00:04, 60.61/s]     76%|#######6  | 764/1000 [00:12<00:03, 60.04/s]     77%|#######7  | 771/1000 [00:12<00:03, 59.50/s]     78%|#######7  | 778/1000 [00:12<00:03, 58.94/s]     78%|#######8  | 785/1000 [00:12<00:03, 58.74/s]     79%|#######9  | 791/1000 [00:12<00:03, 58.49/s]     80%|#######9  | 798/1000 [00:13<00:03, 58.86/s]     80%|########  | 805/1000 [00:13<00:03, 60.33/s]     81%|########1 | 812/1000 [00:13<00:03, 61.46/s]     82%|########1 | 819/1000 [00:13<00:02, 62.17/s]     83%|########2 | 826/1000 [00:13<00:02, 62.07/s]     83%|########3 | 833/1000 [00:13<00:02, 61.04/s]     84%|########4 | 840/1000 [00:13<00:02, 61.26/s]     85%|########4 | 847/1000 [00:13<00:02, 61.47/s]     85%|########5 | 854/1000 [00:13<00:02, 62.50/s]     86%|########6 | 861/1000 [00:14<00:02, 62.39/s]     87%|########6 | 868/1000 [00:14<00:02, 62.53/s]     88%|########7 | 875/1000 [00:14<00:01, 63.00/s]     88%|########8 | 882/1000 [00:14<00:01, 63.05/s]     89%|########8 | 889/1000 [00:14<00:01, 63.19/s]     90%|########9 | 896/1000 [00:14<00:01, 63.06/s]     90%|######### | 904/1000 [00:14<00:01, 63.35/s]     91%|#########1| 911/1000 [00:14<00:01, 63.46/s]     92%|#########1| 918/1000 [00:14<00:01, 63.40/s]     92%|#########2| 925/1000 [00:15<00:01, 63.36/s]     93%|#########3| 932/1000 [00:15<00:01, 63.53/s]     94%|#########3| 939/1000 [00:15<00:00, 63.52/s]     95%|#########4| 946/1000 [00:15<00:00, 63.58/s]     95%|#########5| 953/1000 [00:15<00:00, 63.54/s]     96%|#########6| 960/1000 [00:15<00:00, 63.71/s]     97%|#########6| 967/1000 [00:15<00:00, 63.66/s]     97%|#########7| 974/1000 [00:15<00:00, 63.89/s]     98%|#########8| 982/1000 [00:15<00:00, 63.78/s]     99%|#########8| 989/1000 [00:16<00:00, 63.46/s]    100%|#########9| 996/1000 [00:16<00:00, 63.71/s]    100%|##########| 1000/1000 [00:16<00:00, 61.47/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :alt: Interaction matrix
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-88

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972969</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958588</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939611</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915056</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895769</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889343</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879215</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876511</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873844</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862487</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default


    sc.pl.spatial(adata, color="Yap/Taz", spot_size=1)



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :alt: Yap/Taz
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  56.707 seconds)

**Estimated memory usage:**  846 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
