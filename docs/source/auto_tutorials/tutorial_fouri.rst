
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/main?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/main/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.3 numpy==1.21.6 scipy==1.8.0 pandas==1.4.2 scikit-learn==1.1.0 statsmodels==0.13.2 python-igraph==0.9.10 pynndescent==0.5.7
    squidpy==1.2.0
      0%|          | 0.00/173M [00:00<?, ?B/s]      0%|          | 56.0k/173M [00:00<10:07, 299kB/s]      0%|          | 176k/173M [00:00<06:05, 497kB/s]       0%|          | 680k/173M [00:00<02:01, 1.49MB/s]      1%|          | 1.59M/173M [00:00<00:50, 3.57MB/s]      2%|1         | 3.34M/173M [00:00<00:23, 7.46MB/s]      4%|3         | 6.59M/173M [00:00<00:11, 14.7MB/s]      6%|5         | 9.59M/173M [00:00<00:08, 19.3MB/s]      7%|7         | 12.6M/173M [00:01<00:07, 22.8MB/s]      9%|9         | 15.6M/173M [00:01<00:06, 25.3MB/s]     11%|#         | 18.6M/173M [00:01<00:05, 27.1MB/s]     12%|#2        | 21.6M/173M [00:01<00:05, 28.2MB/s]     14%|#4        | 24.6M/173M [00:01<00:05, 29.2MB/s]     16%|#6        | 27.8M/173M [00:01<00:05, 30.2MB/s]     18%|#7        | 31.0M/173M [00:01<00:04, 31.2MB/s]     20%|#9        | 34.4M/173M [00:01<00:05, 28.2MB/s]     22%|##1       | 37.6M/173M [00:01<00:04, 29.2MB/s]     24%|##3       | 41.1M/173M [00:02<00:04, 31.1MB/s]     25%|##5       | 44.1M/173M [00:02<00:04, 30.8MB/s]     27%|##7       | 47.1M/173M [00:02<00:04, 31.2MB/s]     29%|##9       | 50.5M/173M [00:02<00:03, 32.3MB/s]     31%|###       | 53.6M/173M [00:02<00:03, 32.2MB/s]     33%|###2      | 56.7M/173M [00:02<00:03, 32.3MB/s]     35%|###4      | 60.0M/173M [00:02<00:03, 32.8MB/s]     36%|###6      | 63.0M/173M [00:02<00:03, 32.3MB/s]     38%|###8      | 66.3M/173M [00:02<00:03, 32.9MB/s]     40%|####      | 69.6M/173M [00:03<00:03, 29.3MB/s]     42%|####1     | 72.7M/173M [00:03<00:03, 29.5MB/s]     44%|####3     | 76.0M/173M [00:03<00:03, 31.0MB/s]     46%|####5     | 79.0M/173M [00:03<00:03, 30.9MB/s]     48%|####7     | 82.3M/173M [00:03<00:02, 31.8MB/s]     49%|####9     | 85.6M/173M [00:03<00:02, 32.4MB/s]     51%|#####1    | 88.7M/173M [00:03<00:02, 32.5MB/s]     53%|#####3    | 92.1M/173M [00:03<00:02, 32.8MB/s]     55%|#####5    | 95.4M/173M [00:03<00:02, 33.2MB/s]     57%|#####7    | 98.9M/173M [00:03<00:02, 29.7MB/s]     59%|#####8    | 102M/173M [00:04<00:02, 29.9MB/s]      61%|######    | 105M/173M [00:04<00:02, 30.3MB/s]     63%|######2   | 108M/173M [00:04<00:02, 31.3MB/s]     65%|######4   | 112M/173M [00:04<00:01, 32.9MB/s]     66%|######6   | 115M/173M [00:04<00:01, 32.5MB/s]     68%|######8   | 118M/173M [00:04<00:01, 32.7MB/s]     70%|#######   | 121M/173M [00:04<00:01, 32.8MB/s]     72%|#######1  | 124M/173M [00:04<00:01, 32.1MB/s]     74%|#######3  | 127M/173M [00:04<00:01, 32.4MB/s]     75%|#######5  | 130M/173M [00:04<00:01, 32.0MB/s]     77%|#######7  | 133M/173M [00:05<00:01, 31.2MB/s]     79%|#######8  | 136M/173M [00:05<00:01, 31.4MB/s]     81%|########  | 140M/173M [00:05<00:01, 29.5MB/s]     82%|########2 | 143M/173M [00:05<00:01, 29.7MB/s]     84%|########4 | 146M/173M [00:05<00:00, 30.3MB/s]     86%|########6 | 149M/173M [00:05<00:00, 30.8MB/s]     88%|########7 | 152M/173M [00:05<00:00, 30.9MB/s]     90%|########9 | 155M/173M [00:05<00:00, 30.9MB/s]     91%|#########1| 158M/173M [00:05<00:00, 31.3MB/s]     93%|#########3| 161M/173M [00:06<00:00, 31.4MB/s]     95%|#########4| 164M/173M [00:06<00:00, 31.3MB/s]     97%|#########6| 167M/173M [00:06<00:00, 31.0MB/s]     98%|#########8| 170M/173M [00:06<00:00, 31.4MB/s]    100%|##########| 173M/173M [00:06<00:00, 28.1MB/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1830: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
      utils.warn_names_duplicates("var")




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=1)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-58

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:00<03:00,  5.53/s]      1%|          | 6/1000 [00:00<00:40, 24.67/s]      1%|1         | 11/1000 [00:00<00:29, 33.84/s]      2%|1         | 16/1000 [00:00<00:25, 38.63/s]      2%|2         | 21/1000 [00:00<00:23, 41.77/s]      3%|2         | 26/1000 [00:00<00:22, 43.94/s]      3%|3         | 31/1000 [00:00<00:21, 45.62/s]      4%|3         | 37/1000 [00:00<00:20, 47.55/s]      4%|4         | 43/1000 [00:01<00:19, 48.42/s]      5%|4         | 49/1000 [00:01<00:19, 48.96/s]      6%|5         | 55/1000 [00:01<00:19, 49.63/s]      6%|6         | 61/1000 [00:01<00:18, 50.19/s]      7%|6         | 67/1000 [00:01<00:18, 50.12/s]      7%|7         | 73/1000 [00:01<00:18, 48.85/s]      8%|7         | 79/1000 [00:01<00:18, 49.34/s]      8%|8         | 85/1000 [00:01<00:18, 49.33/s]      9%|9         | 90/1000 [00:01<00:18, 48.68/s]     10%|9         | 96/1000 [00:02<00:18, 49.10/s]     10%|#         | 101/1000 [00:02<00:18, 49.26/s]     11%|#         | 107/1000 [00:02<00:17, 49.65/s]     11%|#1        | 112/1000 [00:02<00:17, 49.61/s]     12%|#1        | 118/1000 [00:02<00:17, 50.37/s]     12%|#2        | 124/1000 [00:02<00:17, 50.65/s]     13%|#3        | 130/1000 [00:02<00:17, 50.27/s]     14%|#3        | 136/1000 [00:02<00:17, 49.77/s]     14%|#4        | 142/1000 [00:03<00:17, 49.37/s]     15%|#4        | 147/1000 [00:03<00:17, 49.23/s]     15%|#5        | 152/1000 [00:03<00:17, 49.35/s]     16%|#5        | 157/1000 [00:03<00:17, 49.41/s]     16%|#6        | 162/1000 [00:03<00:17, 48.71/s]     17%|#6        | 167/1000 [00:03<00:17, 48.54/s]     17%|#7        | 173/1000 [00:03<00:16, 48.96/s]     18%|#7        | 179/1000 [00:03<00:16, 49.28/s]     18%|#8        | 184/1000 [00:03<00:16, 49.11/s]     19%|#9        | 191/1000 [00:04<00:16, 49.71/s]     20%|#9        | 198/1000 [00:04<00:16, 50.03/s]     20%|##        | 204/1000 [00:04<00:16, 49.20/s]     21%|##1       | 210/1000 [00:04<00:15, 50.11/s]     22%|##1       | 216/1000 [00:04<00:15, 50.27/s]     22%|##2       | 222/1000 [00:04<00:15, 50.25/s]     23%|##2       | 228/1000 [00:04<00:15, 50.49/s]     23%|##3       | 234/1000 [00:04<00:15, 50.85/s]     24%|##4       | 240/1000 [00:04<00:14, 51.11/s]     25%|##4       | 246/1000 [00:05<00:14, 50.73/s]     25%|##5       | 252/1000 [00:05<00:14, 50.47/s]     26%|##5       | 258/1000 [00:05<00:14, 50.47/s]     26%|##6       | 264/1000 [00:05<00:14, 50.07/s]     27%|##7       | 270/1000 [00:05<00:14, 49.68/s]     28%|##7       | 276/1000 [00:05<00:14, 50.13/s]     28%|##8       | 282/1000 [00:05<00:14, 50.14/s]     29%|##8       | 288/1000 [00:05<00:14, 49.69/s]     29%|##9       | 293/1000 [00:06<00:14, 49.70/s]     30%|##9       | 298/1000 [00:06<00:14, 49.17/s]     30%|###       | 304/1000 [00:06<00:14, 49.36/s]     31%|###1      | 310/1000 [00:06<00:13, 49.55/s]     32%|###1      | 316/1000 [00:06<00:13, 49.26/s]     32%|###2      | 321/1000 [00:06<00:13, 49.09/s]     33%|###2      | 326/1000 [00:06<00:13, 49.12/s]     33%|###3      | 331/1000 [00:06<00:13, 49.17/s]     34%|###3      | 336/1000 [00:06<00:13, 48.68/s]     34%|###4      | 342/1000 [00:07<00:13, 47.93/s]     35%|###4      | 348/1000 [00:07<00:13, 47.89/s]     35%|###5      | 353/1000 [00:07<00:13, 47.90/s]     36%|###5      | 358/1000 [00:07<00:13, 47.97/s]     36%|###6      | 363/1000 [00:07<00:13, 47.73/s]     37%|###6      | 368/1000 [00:07<00:13, 47.56/s]     37%|###7      | 373/1000 [00:07<00:13, 47.13/s]     38%|###7      | 378/1000 [00:07<00:13, 47.28/s]     38%|###8      | 383/1000 [00:07<00:12, 47.97/s]     39%|###8      | 388/1000 [00:08<00:12, 47.77/s]     39%|###9      | 393/1000 [00:08<00:12, 46.93/s]     40%|###9      | 398/1000 [00:08<00:12, 46.89/s]     40%|####      | 403/1000 [00:08<00:12, 47.42/s]     41%|####      | 408/1000 [00:08<00:12, 47.53/s]     41%|####1     | 413/1000 [00:08<00:12, 47.86/s]     42%|####1     | 418/1000 [00:08<00:12, 47.77/s]     42%|####2     | 423/1000 [00:08<00:12, 47.88/s]     43%|####2     | 428/1000 [00:08<00:11, 47.92/s]     43%|####3     | 433/1000 [00:08<00:11, 47.79/s]     44%|####3     | 438/1000 [00:09<00:11, 47.57/s]     44%|####4     | 443/1000 [00:09<00:11, 47.43/s]     45%|####4     | 449/1000 [00:09<00:10, 50.21/s]     46%|####5     | 455/1000 [00:09<00:11, 49.27/s]     46%|####6     | 460/1000 [00:09<00:11, 46.19/s]     46%|####6     | 465/1000 [00:09<00:11, 46.90/s]     47%|####7     | 471/1000 [00:09<00:11, 46.80/s]     48%|####7     | 477/1000 [00:09<00:11, 47.01/s]     48%|####8     | 482/1000 [00:10<00:11, 46.80/s]     49%|####8     | 488/1000 [00:10<00:11, 46.53/s]     49%|####9     | 493/1000 [00:10<00:10, 46.31/s]     50%|####9     | 498/1000 [00:10<00:10, 46.60/s]     50%|#####     | 503/1000 [00:10<00:10, 46.39/s]     51%|#####     | 508/1000 [00:10<00:10, 46.42/s]     51%|#####1    | 514/1000 [00:10<00:10, 46.48/s]     52%|#####1    | 519/1000 [00:10<00:10, 46.31/s]     52%|#####2    | 524/1000 [00:10<00:10, 47.12/s]     53%|#####2    | 529/1000 [00:11<00:09, 47.31/s]     53%|#####3    | 534/1000 [00:11<00:09, 47.03/s]     54%|#####3    | 539/1000 [00:11<00:09, 47.83/s]     54%|#####4    | 544/1000 [00:11<00:09, 47.95/s]     55%|#####4    | 549/1000 [00:11<00:09, 48.17/s]     55%|#####5    | 554/1000 [00:11<00:09, 47.87/s]     56%|#####5    | 559/1000 [00:11<00:09, 48.30/s]     56%|#####6    | 564/1000 [00:11<00:09, 48.34/s]     57%|#####6    | 569/1000 [00:11<00:08, 48.46/s]     57%|#####7    | 574/1000 [00:11<00:08, 48.82/s]     58%|#####7    | 579/1000 [00:12<00:08, 48.01/s]     58%|#####8    | 584/1000 [00:12<00:08, 48.23/s]     59%|#####8    | 589/1000 [00:12<00:08, 48.61/s]     59%|#####9    | 594/1000 [00:12<00:08, 48.34/s]     60%|#####9    | 599/1000 [00:12<00:08, 48.07/s]     60%|######    | 605/1000 [00:12<00:08, 48.53/s]     61%|######1   | 611/1000 [00:12<00:08, 48.21/s]     62%|######1   | 616/1000 [00:12<00:07, 48.45/s]     62%|######2   | 623/1000 [00:12<00:07, 49.26/s]     63%|######2   | 628/1000 [00:13<00:07, 49.15/s]     63%|######3   | 633/1000 [00:13<00:07, 49.03/s]     64%|######3   | 639/1000 [00:13<00:07, 49.45/s]     64%|######4   | 644/1000 [00:13<00:07, 49.27/s]     65%|######4   | 649/1000 [00:13<00:07, 49.21/s]     66%|######5   | 655/1000 [00:13<00:06, 49.70/s]     66%|######6   | 660/1000 [00:13<00:06, 49.73/s]     66%|######6   | 665/1000 [00:13<00:06, 49.51/s]     67%|######7   | 672/1000 [00:13<00:06, 50.09/s]     68%|######7   | 678/1000 [00:14<00:06, 50.22/s]     68%|######8   | 684/1000 [00:14<00:06, 50.12/s]     69%|######9   | 690/1000 [00:14<00:06, 50.06/s]     70%|######9   | 696/1000 [00:14<00:06, 50.34/s]     70%|#######   | 702/1000 [00:14<00:05, 50.51/s]     71%|#######   | 708/1000 [00:14<00:05, 50.25/s]     71%|#######1  | 714/1000 [00:14<00:05, 50.02/s]     72%|#######2  | 720/1000 [00:14<00:05, 49.92/s]     72%|#######2  | 725/1000 [00:15<00:05, 49.68/s]     73%|#######3  | 731/1000 [00:15<00:05, 48.90/s]     74%|#######3  | 736/1000 [00:15<00:05, 49.12/s]     74%|#######4  | 741/1000 [00:15<00:05, 49.16/s]     75%|#######4  | 746/1000 [00:15<00:05, 49.06/s]     75%|#######5  | 751/1000 [00:15<00:05, 48.86/s]     76%|#######5  | 756/1000 [00:15<00:05, 48.68/s]     76%|#######6  | 762/1000 [00:15<00:04, 49.32/s]     77%|#######6  | 768/1000 [00:15<00:04, 49.76/s]     77%|#######7  | 774/1000 [00:15<00:04, 49.97/s]     78%|#######7  | 779/1000 [00:16<00:04, 49.86/s]     78%|#######8  | 785/1000 [00:16<00:04, 50.05/s]     79%|#######9  | 791/1000 [00:16<00:04, 50.50/s]     80%|#######9  | 797/1000 [00:16<00:04, 50.59/s]     80%|########  | 803/1000 [00:16<00:03, 50.60/s]     81%|########  | 809/1000 [00:16<00:03, 50.64/s]     82%|########1 | 815/1000 [00:16<00:03, 50.84/s]     82%|########2 | 821/1000 [00:16<00:03, 50.68/s]     83%|########2 | 827/1000 [00:17<00:03, 50.53/s]     83%|########3 | 833/1000 [00:17<00:03, 50.64/s]     84%|########4 | 840/1000 [00:17<00:03, 50.94/s]     85%|########4 | 846/1000 [00:17<00:03, 51.05/s]     85%|########5 | 852/1000 [00:17<00:02, 50.83/s]     86%|########5 | 858/1000 [00:17<00:02, 50.89/s]     86%|########6 | 865/1000 [00:17<00:02, 50.74/s]     87%|########7 | 871/1000 [00:17<00:02, 50.81/s]     88%|########7 | 877/1000 [00:18<00:02, 50.55/s]     88%|########8 | 883/1000 [00:18<00:02, 50.47/s]     89%|########8 | 889/1000 [00:18<00:02, 50.01/s]     90%|########9 | 895/1000 [00:18<00:02, 49.90/s]     90%|######### | 901/1000 [00:18<00:02, 49.39/s]     91%|######### | 907/1000 [00:18<00:01, 49.78/s]     91%|#########1| 913/1000 [00:18<00:01, 49.86/s]     92%|#########1| 919/1000 [00:18<00:01, 50.35/s]     92%|#########2| 925/1000 [00:18<00:01, 50.67/s]     93%|#########3| 931/1000 [00:19<00:01, 53.13/s]     94%|#########3| 937/1000 [00:19<00:01, 49.48/s]     94%|#########4| 943/1000 [00:19<00:01, 49.89/s]     95%|#########4| 949/1000 [00:19<00:01, 50.26/s]     96%|#########5| 955/1000 [00:19<00:00, 50.28/s]     96%|#########6| 961/1000 [00:19<00:00, 49.94/s]     97%|#########6| 967/1000 [00:19<00:00, 49.86/s]     97%|#########7| 972/1000 [00:19<00:00, 49.51/s]     98%|#########7| 977/1000 [00:20<00:00, 48.73/s]     98%|#########8| 982/1000 [00:20<00:00, 47.89/s]     99%|#########8| 987/1000 [00:20<00:00, 48.08/s]     99%|#########9| 992/1000 [00:20<00:00, 48.31/s]    100%|#########9| 997/1000 [00:20<00:00, 48.27/s]    100%|##########| 1000/1000 [00:20<00:00, 48.79/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :alt: Interaction matrix
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-88

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972969</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958588</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939611</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915056</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895769</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889343</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879215</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876511</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873844</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862487</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default


    sc.pl.spatial(adata, color="Yap/Taz", spot_size=1)



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :alt: Yap/Taz
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  8.865 seconds)

**Estimated memory usage:**  1247 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
