
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_visium_fluo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_visium_fluo.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_visium_fluo.py:

Analyze Visium fluorescence data
================================

This tutorial shows how to apply Squidpy image analysis features for the analysis of Visium data.

For a tutorial using Visium data that includes the graph analysis functions, have a look at
:ref:`sphx_glr_auto_tutorials_tutorial_visium_hne.py`.
The dataset used here consists of a Visium slide of a coronal section of the mouse brain.
The original dataset is publicly available at the
10x genomics `dataset portal <https://support.10xgenomics.com/spatial-gene-expression/datasets>`_ .
Here, we provide a pre-processed dataset, with pre-annotated clusters, in :class:`anndata.AnnData` format and the
tissue image in :class:`squidpy.im.ImageContainer` format.

A couple of notes on pre-processing:

- The pre-processing pipeline is the same as the one shown in the original
  `Scanpy tutorial <https://scanpy-tutorials.readthedocs.io/en/latest/spatial/basic-analysis.html>`_ .
- The cluster annotation was performed using several resources, such as the
  `Allen Brain Atlas <http://mouse.brain-map.org/experiment/thumbnails/100048576?image_type=atlas>`_ ,
  the `Mouse Brain gene expression atlas <http://mousebrain.org/genesearch.html>`_
  from the Linnarson lab and this recent pre-print :cite:`linnarson2020`.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_visium_hne.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_

.. GENERATED FROM PYTHON SOURCE LINES 34-50

.. code-block:: default


    import scanpy as sc
    import anndata as ad
    import squidpy as sq

    import pandas as pd

    import matplotlib.pyplot as plt

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.7.1 anndata==0.7.5 umap==0.5.1 numpy==1.20.2 scipy==1.6.2 pandas==1.2.3 scikit-learn==0.24.1 statsmodels==0.12.2 python-igraph==0.9.1 leidenalg==0.8.3
    squidpy==1.0.0
      0%|          | 0.00/303M [00:00<?, ?B/s]      0%|          | 56.0k/303M [00:00<18:08, 291kB/s]      0%|          | 192k/303M [00:00<09:53, 534kB/s]       0%|          | 512k/303M [00:00<03:54, 1.35MB/s]      0%|          | 1.09M/303M [00:00<01:53, 2.78MB/s]      1%|          | 1.88M/303M [00:00<01:11, 4.41MB/s]      1%|1         | 3.47M/303M [00:00<00:38, 8.08MB/s]      2%|2         | 6.31M/303M [00:00<00:21, 14.6MB/s]      3%|3         | 9.20M/303M [00:01<00:16, 19.0MB/s]      4%|4         | 12.2M/303M [00:01<00:13, 22.7MB/s]      5%|5         | 15.2M/303M [00:01<00:11, 25.2MB/s]      6%|6         | 18.2M/303M [00:01<00:11, 27.1MB/s]      7%|6         | 21.1M/303M [00:01<00:10, 28.0MB/s]      8%|7         | 24.0M/303M [00:01<00:10, 28.9MB/s]      9%|8         | 27.1M/303M [00:01<00:09, 29.7MB/s]     10%|9         | 30.2M/303M [00:01<00:09, 30.5MB/s]     11%|#         | 33.2M/303M [00:01<00:09, 30.9MB/s]     12%|#1        | 36.2M/303M [00:01<00:09, 30.9MB/s]     13%|#2        | 39.1M/303M [00:02<00:08, 30.9MB/s]     14%|#3        | 42.3M/303M [00:02<00:08, 31.5MB/s]     15%|#4        | 45.3M/303M [00:02<00:08, 31.5MB/s]     16%|#5        | 48.1M/303M [00:02<00:08, 31.0MB/s]     17%|#6        | 51.2M/303M [00:02<00:08, 31.4MB/s]     18%|#7        | 54.3M/303M [00:02<00:08, 31.7MB/s]     19%|#8        | 57.3M/303M [00:02<00:08, 31.0MB/s]     20%|#9        | 60.3M/303M [00:02<00:08, 31.1MB/s]     21%|##        | 63.2M/303M [00:02<00:08, 31.1MB/s]     22%|##1       | 66.3M/303M [00:02<00:07, 31.5MB/s]     23%|##2       | 69.3M/303M [00:03<00:07, 31.4MB/s]     24%|##3       | 72.3M/303M [00:03<00:09, 26.1MB/s]     25%|##4       | 75.3M/303M [00:03<00:08, 27.4MB/s]     26%|##5       | 78.3M/303M [00:03<00:08, 28.5MB/s]     27%|##6       | 81.2M/303M [00:03<00:07, 29.1MB/s]     28%|##7       | 84.2M/303M [00:03<00:07, 29.5MB/s]     29%|##8       | 87.2M/303M [00:03<00:07, 29.8MB/s]     30%|##9       | 90.2M/303M [00:03<00:07, 30.4MB/s]     31%|###       | 93.2M/303M [00:03<00:07, 30.6MB/s]     32%|###1      | 96.3M/303M [00:03<00:06, 30.9MB/s]     33%|###2      | 99.3M/303M [00:04<00:06, 31.2MB/s]     34%|###3      | 102M/303M [00:04<00:06, 31.3MB/s]      35%|###4      | 105M/303M [00:04<00:06, 31.1MB/s]     36%|###5      | 108M/303M [00:04<00:06, 31.5MB/s]     37%|###6      | 112M/303M [00:04<00:06, 31.1MB/s]     38%|###7      | 115M/303M [00:04<00:06, 31.2MB/s]     39%|###8      | 118M/303M [00:04<00:06, 31.2MB/s]     40%|###9      | 121M/303M [00:04<00:06, 31.2MB/s]     41%|####      | 123M/303M [00:04<00:06, 31.2MB/s]     42%|####1     | 126M/303M [00:04<00:05, 31.2MB/s]     43%|####2     | 129M/303M [00:05<00:05, 30.9MB/s]     44%|####3     | 132M/303M [00:05<00:05, 30.7MB/s]     45%|####4     | 135M/303M [00:05<00:05, 31.1MB/s]     46%|####5     | 138M/303M [00:05<00:05, 31.4MB/s]     47%|####6     | 141M/303M [00:05<00:05, 31.6MB/s]     48%|####7     | 145M/303M [00:05<00:05, 31.9MB/s]     49%|####8     | 148M/303M [00:05<00:05, 32.0MB/s]     50%|####9     | 151M/303M [00:05<00:05, 31.8MB/s]     51%|#####     | 154M/303M [00:05<00:04, 31.5MB/s]     52%|#####1    | 157M/303M [00:06<00:04, 31.4MB/s]     53%|#####2    | 160M/303M [00:06<00:04, 31.5MB/s]     54%|#####3    | 163M/303M [00:06<00:04, 31.4MB/s]     55%|#####4    | 166M/303M [00:06<00:04, 31.4MB/s]     56%|#####5    | 169M/303M [00:06<00:04, 31.6MB/s]     57%|#####6    | 172M/303M [00:06<00:04, 31.7MB/s]     58%|#####7    | 175M/303M [00:06<00:04, 27.3MB/s]     59%|#####8    | 178M/303M [00:06<00:04, 27.8MB/s]     60%|#####9    | 181M/303M [00:06<00:04, 28.8MB/s]     61%|######    | 184M/303M [00:06<00:04, 29.6MB/s]     62%|######1   | 187M/303M [00:07<00:04, 29.8MB/s]     63%|######2   | 190M/303M [00:07<00:03, 30.5MB/s]     64%|######3   | 193M/303M [00:07<00:03, 30.9MB/s]     65%|######4   | 196M/303M [00:07<00:03, 30.8MB/s]     66%|######5   | 199M/303M [00:07<00:03, 31.1MB/s]     67%|######6   | 202M/303M [00:07<00:03, 31.2MB/s]     68%|######7   | 205M/303M [00:07<00:03, 31.5MB/s]     69%|######8   | 208M/303M [00:07<00:03, 31.7MB/s]     70%|######9   | 211M/303M [00:07<00:03, 31.5MB/s]     71%|#######   | 214M/303M [00:07<00:02, 31.1MB/s]     72%|#######1  | 217M/303M [00:08<00:02, 31.0MB/s]     73%|#######2  | 220M/303M [00:08<00:02, 31.1MB/s]     74%|#######3  | 223M/303M [00:08<00:02, 31.4MB/s]     75%|#######4  | 226M/303M [00:08<00:02, 31.1MB/s]     76%|#######5  | 229M/303M [00:08<00:02, 31.3MB/s]     77%|#######6  | 232M/303M [00:08<00:02, 31.7MB/s]     78%|#######7  | 235M/303M [00:08<00:02, 31.9MB/s]     79%|#######8  | 238M/303M [00:08<00:02, 31.8MB/s]     80%|#######9  | 241M/303M [00:08<00:02, 31.7MB/s]     81%|########  | 244M/303M [00:08<00:01, 31.7MB/s]     82%|########1 | 247M/303M [00:09<00:01, 31.2MB/s]     83%|########2 | 250M/303M [00:09<00:01, 31.3MB/s]     84%|########3 | 253M/303M [00:09<00:01, 31.5MB/s]     85%|########4 | 256M/303M [00:09<00:01, 31.4MB/s]     86%|########5 | 259M/303M [00:09<00:01, 31.8MB/s]     87%|########6 | 262M/303M [00:09<00:01, 31.7MB/s]     88%|########7 | 265M/303M [00:09<00:01, 27.5MB/s]     89%|########8 | 268M/303M [00:09<00:01, 28.4MB/s]     90%|########9 | 271M/303M [00:09<00:01, 29.3MB/s]     91%|######### | 274M/303M [00:10<00:01, 29.1MB/s]     92%|#########1| 277M/303M [00:10<00:00, 29.9MB/s]     93%|#########2| 280M/303M [00:10<00:00, 30.5MB/s]     94%|#########3| 283M/303M [00:10<00:00, 30.9MB/s]     95%|#########4| 287M/303M [00:10<00:00, 31.3MB/s]     96%|#########5| 290M/303M [00:10<00:00, 31.3MB/s]     97%|#########6| 293M/303M [00:10<00:00, 31.3MB/s]     98%|#########7| 296M/303M [00:10<00:00, 31.4MB/s]     99%|#########8| 299M/303M [00:10<00:00, 30.4MB/s]    100%|#########9| 302M/303M [00:10<00:00, 30.9MB/s]    100%|##########| 303M/303M [00:10<00:00, 28.9MB/s]
      0%|          | 0.00/65.5M [00:00<?, ?B/s]      0%|          | 56.0k/65.5M [00:00<03:56, 290kB/s]      0%|          | 120k/65.5M [00:00<02:34, 443kB/s]       1%|          | 360k/65.5M [00:00<00:57, 1.20MB/s]      1%|1         | 704k/65.5M [00:00<00:33, 2.01MB/s]      2%|2         | 1.43M/65.5M [00:00<00:17, 3.93MB/s]      4%|3         | 2.55M/65.5M [00:00<00:10, 6.43MB/s]      7%|6         | 4.26M/65.5M [00:00<00:06, 10.1MB/s]     11%|#         | 7.10M/65.5M [00:00<00:03, 16.2MB/s]     15%|#5        | 10.1M/65.5M [00:00<00:02, 21.0MB/s]     20%|##        | 13.2M/65.5M [00:01<00:02, 24.2MB/s]     25%|##4       | 16.2M/65.5M [00:01<00:01, 26.5MB/s]     29%|##9       | 19.3M/65.5M [00:01<00:01, 28.2MB/s]     34%|###4      | 22.3M/65.5M [00:01<00:01, 29.3MB/s]     39%|###8      | 25.3M/65.5M [00:01<00:01, 30.0MB/s]     43%|####3     | 28.4M/65.5M [00:01<00:01, 30.7MB/s]     48%|####8     | 31.5M/65.5M [00:01<00:01, 31.1MB/s]     53%|#####2    | 34.5M/65.5M [00:01<00:01, 31.0MB/s]     57%|#####7    | 37.6M/65.5M [00:01<00:00, 31.4MB/s]     62%|######2   | 40.6M/65.5M [00:02<00:00, 31.5MB/s]     66%|######6   | 43.4M/65.5M [00:02<00:00, 30.8MB/s]     71%|#######   | 46.4M/65.5M [00:02<00:00, 30.9MB/s]     75%|#######5  | 49.4M/65.5M [00:02<00:00, 31.1MB/s]     80%|#######9  | 52.3M/65.5M [00:02<00:00, 31.1MB/s]     85%|########4 | 55.4M/65.5M [00:02<00:00, 31.3MB/s]     89%|########9 | 58.4M/65.5M [00:02<00:00, 31.3MB/s]     94%|#########3| 61.4M/65.5M [00:02<00:00, 31.3MB/s]     98%|#########8| 64.5M/65.5M [00:02<00:00, 31.7MB/s]    100%|##########| 65.5M/65.5M [00:02<00:00, 23.8MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 51-56

First, let's visualize the cluster annotation in the spatial context
with :func:`scanpy.pl.spatial`.

As you can see, this dataset is a smaller crop of the whole brain section.
We provide this crop to make the execution time of this tutorial a bit shorter.

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default


    sc.pl.spatial(adata, color="cluster")





.. image:: /auto_tutorials/images/sphx_glr_tutorial_visium_fluo_001.png
    :alt: cluster
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-64

The fluorescence image provided with this dataset has three channels:
*DAPI* (specific to DNA), *anti-NEUN* (specific to neurons), *anti-GFAP* (specific to Glial cells).
We can directly visualize the channels with the method :meth:`squidpy.im.ImageContainer.show`.

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: default


    fig, axes = plt.subplots(1, 3)
    for i, ax in enumerate(axes):
        img.show(channel=i, ax=ax)




.. image:: /auto_tutorials/images/sphx_glr_tutorial_visium_fluo_002.png
    :alt: tutorial visium fluo
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-100

Visium datasets contain high-resolution images of the tissue.
Using the function :func:`squidpy.im.calculate_image_features` you can calculate image features
for each Visium spot and create a ``obs x features`` matrix in ``adata`` that can then be analyzed together
with the ``obs x gene`` gene expression matrix.

By extracting image features we are aiming to get both similar and complementary information to the
gene expression values.
Similar information is for example present in the case of a tissue with two different cell types
whose morphology is different.
Such cell type information is then contained in both the gene expression values and the tissue image features.
Complementary or additional information is present in the fact that we can use a nucleus segmentation
to count cells and add features summarizing the immediate spatial neighborhood of a spot.

Squidpy contains several feature extractors and a flexible pipeline of calculating features
of different scales and sizes.
There are several detailed examples of how to use :func:`squidpy.im.calculate_image_features`.
:ref:`sphx_glr_auto_examples_image_compute_features.py` provides a good starting point for learning more.

Here, we will extract `summary`, `histogram`, `segmentation`, and `texture` features.
To provide more context and allow the calculation of multi-scale features, we will additionally calculate
`summary` and `histogram` features at different crop sizes and scales.

Image segmentation
------------------
To calculate `segmentation` features, we first need to segment the tissue image using :func:`squidpy.im.segment`.
But even before that, it's best practice to pre-process the image by e.g. smoothing it using
in :func:`squidpy.im.process`.
We will then use the *DAPI* channel of the fluorescence image (``channel_ids=0``).
Please refer to :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py`
for more details on how to calculate a segmented image.

.. GENERATED FROM PYTHON SOURCE LINES 100-119

.. code-block:: default


    sq.im.process(
        img=img,
        layer="image",
        method="smooth",
    )

    sq.im.segment(img=img, layer="image_smooth", method="watershed", channel_ids=0, xs=1000, ys=1000)

    # plot the resulting segmentation
    fig, ax = plt.subplots(1, 2)
    img_crop = img.crop_corner(2000, 2000, size=500)
    img_crop.show(layer="image", channel=0, ax=ax[0])
    img_crop.show(
        layer="segmented_watershed",
        channel=0,
        ax=ax[1],
    )




.. image:: /auto_tutorials/images/sphx_glr_tutorial_visium_fluo_003.png
    :alt: tutorial visium fluo
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-135

The result of :func:`squidpy.im.segment` is saved in ``img['segmented_watershed']`` by default.
It is a label image where each segmented object is annotated with a different integer number.

Segmentation features
---------------------
We can now use the segmentation to calculate segmentation features.
These include morphological features of the segmented objects and channel-wise image
intensities beneath the segmentation mask.
In particular, we can count the segmented objects within each Visium spot to get an
approximation of the number of cells.
In addition, we can calculate the mean intensity of each fluorescence channel within the segmented objects.
Depending on the fluorescence channels, this can give us e.g., an estimation of the cell type.
For more details on how the segmentation features, you can have a look at
the docs of :func:`squidpy.im.calculate_image_features` or the example at
:ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py`.

.. GENERATED FROM PYTHON SOURCE LINES 135-162

.. code-block:: default



    # define image layer to use for segmentation
    features_kwargs = {"segmentation": {"label_layer": "segmented_watershed"}}
    # calculate segmentation features
    sq.im.calculate_image_features(
        adata,
        img,
        features="segmentation",
        layer="image",
        key_added="features_segmentation",
        n_jobs=1,
        features_kwargs=features_kwargs,
    )
    # plot results and compare with gene-space clustering
    sc.pl.spatial(
        sq.pl.extract(adata, "features_segmentation"),
        color=[
            "segmentation_label",
            "cluster",
            "segmentation_ch-0_mean_intensity_mean",
            "segmentation_ch-1_mean_intensity_mean",
        ],
        frameon=False,
        ncols=2,
    )




.. image:: /auto_tutorials/images/sphx_glr_tutorial_visium_fluo_004.png
    :alt: segmentation_label, cluster, segmentation_ch-0_mean_intensity_mean, segmentation_ch-1_mean_intensity_mean
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/704 [00:00<?, ?/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 163-189

Above, we made use of :func:`squidpy.pl.extract`, a method to extract
all features in a given `adata.obsm['{key}']` and temporarily save them to :attr:`anndata.AnnData.obs`.
Such method is particularly useful for plotting purpose, as shown above.

The number of cells per Visium spot provides an interesting view of the data that can enhance
the characterization of gene-space clusters.
We can see that the cell-rich pyramidal layer of the Hippocampus has more cells than the surrounding areas
(upper left).
This fine-grained view of the Hippocampus is not visible in the gene clusters where
the Hippocampus is one cluster only.

The per-channel intensities plotted in the second row show us that the areas labeled with *Cortex_1* and
*Cortex_3* have a higher intensity of channel 1, *anti-NEUN* (lower left).
This means that these areas have more neurons that the remaining areas in this crop.
In addition, cluster *Fiber_tracts* and *lateral ventricles* seems to be enriched with *Glial cells*,
seen by the larger mean intensities of channel 2, *anti-GFAP*, in these areas (lower right).

Extract and cluster features
----------------------------
Now we will calculate summary, histogram, and texture features.
These features provide a useful compressed summary of the tissue image.
For more information on these features, refer to:

- :ref:`sphx_glr_auto_examples_image_compute_summary_features.py`.
- :ref:`sphx_glr_auto_examples_image_compute_histogram_features.py`.
- :ref:`sphx_glr_auto_examples_image_compute_texture_features.py`.

.. GENERATED FROM PYTHON SOURCE LINES 189-216

.. code-block:: default



    # define different feature calculation combinations
    params = {
        # all features, corresponding only to tissue underneath spot
        "features_orig": {
            "features": ["summary", "texture", "histogram"],
            "scale": 1.0,
            "mask_circle": True,
        },
        # summary and histogram features with a bit more context, original resolution
        "features_context": {"features": ["summary", "histogram"], "scale": 1.0},
        # summary and histogram features with more context and at lower resolution
        "features_lowres": {"features": ["summary", "histogram"], "scale": 0.25},
    }

    for feature_name, cur_params in params.items():
        # features will be saved in `adata.obsm[feature_name]`
        sq.im.calculate_image_features(adata, img, layer="image", key_added=feature_name, n_jobs=1, **cur_params)

    # combine features in one dataframe
    adata.obsm["features"] = pd.concat([adata.obsm[f] for f in params.keys()], axis="columns")

    # make sure that we have no duplicated feature names in the combined table
    adata.obsm["features"].columns = ad.utils.make_index_unique(adata.obsm["features"].columns)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/704 [00:00<?, ?/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)
      0%|          | 0/704 [00:00<?, ?/s]
      0%|          | 0/704 [00:00<?, ?/s]




.. GENERATED FROM PYTHON SOURCE LINES 217-221

We can use the extracted image features to compute a new cluster annotation.
This could be useful to gain insights in similarities across spots based on image morphology.

For this, we first define a helper function to cluster features.

.. GENERATED FROM PYTHON SOURCE LINES 221-243

.. code-block:: default



    def cluster_features(features: pd.DataFrame, like=None):
        """Calculate leiden clustering of features.

        Specify filter of features using `like`.
        """
        # filter features
        if like is not None:
            features = features.filter(like=like)
        # create temporary adata to calculate the clustering
        adata = ad.AnnData(features)
        # important - feature values are not scaled, so need to scale them before PCA
        sc.pp.scale(adata)
        # calculate leiden clustering
        sc.pp.pca(adata, n_comps=min(10, features.shape[1] - 1))
        sc.pp.neighbors(adata)
        sc.tl.leiden(adata)

        return adata.obs["leiden"]









.. GENERATED FROM PYTHON SOURCE LINES 244-245

Then, we calculate feature clusters using different features and compare them to gene clusters

.. GENERATED FROM PYTHON SOURCE LINES 245-262

.. code-block:: default


    adata.obs["features_summary_cluster"] = cluster_features(adata.obsm["features"], like="summary")
    adata.obs["features_histogram_cluster"] = cluster_features(adata.obsm["features"], like="histogram")
    adata.obs["features_texture_cluster"] = cluster_features(adata.obsm["features"], like="texture")

    sc.set_figure_params(facecolor="white", figsize=(8, 8))
    sc.pl.spatial(
        adata,
        color=[
            "features_summary_cluster",
            "features_histogram_cluster",
            "features_texture_cluster",
            "cluster",
        ],
        ncols=3,
    )




.. image:: /auto_tutorials/images/sphx_glr_tutorial_visium_fluo_005.png
    :alt: features_summary_cluster, features_histogram_cluster, features_texture_cluster, cluster
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 263-275

Like the gene-space clusters (bottom middle), the feature space clusters are also spatially coherent.

The feature clusters of the different feature extractors are quite diverse, but all of them reflect
the structure of the hippocampus by assigning different clusters to the different structural areas.
This is a higher level of detail than the gene-space clustering provides with only one cluster for the hippocampus.

The feature clusters also show the layered structure of the cortex, but again subdividing it in more clusters
than the gene-space clustering.
It might be possible to re-cluster the gene expression counts with a higher resolution to also get
more fine-grained clusters, but nevertheless the image features seem to provide additional supporting
information to the gene-space clusters.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  30.562 seconds)

**Estimated memory usage:**  5133 MB


.. _sphx_glr_download_auto_tutorials_tutorial_visium_fluo.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_visium_fluo.py <tutorial_visium_fluo.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_visium_fluo.ipynb <tutorial_visium_fluo.ipynb>`
