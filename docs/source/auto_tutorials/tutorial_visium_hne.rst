
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_visium_hne.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/main?filepath=docs/source/auto_tutorials/tutorial_visium_hne.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_visium_hne.py:

Analyze Visium H&E data
=======================

This tutorial shows how to apply Squidpy for the analysis of Visium spatial transcriptomics data.

The dataset used here consists of a Visium slide of a coronal section of the mouse brain.
The original dataset is publicly available at the
10x Genomics `dataset portal <https://support.10xgenomics.com/spatial-gene-expression/datasets>`_ .
Here, we provide a pre-processed dataset, with pre-annotated clusters, in AnnData format and the
tissue image in :class:`squidpy.im.ImageContainer` format.

A couple of notes on pre-processing:

    - The pre-processing pipeline is the same as the one shown in the original
      `Scanpy tutorial <https://scanpy-tutorials.readthedocs.io/en/latest/spatial/basic-analysis.html>`_ .
    - The cluster annotation was performed using several resources, such as the
      `Allen Brain Atlas <https://mouse.brain-map.org/experiment/thumbnails/100048576?image_type=atlas>`_ ,
      the `Mouse Brain gene expression atlas <http://mousebrain.org/>`_ from
      the Linnarson lab and this recent `pre-print <https://www.biorxiv.org/content/10.1101/2020.07.24.219758v1>`_ .

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_visium_fluo.py` for a detailed analysis example of image features.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/main/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 32-47

.. code-block:: default


    import scanpy as sc
    import anndata as ad
    import squidpy as sq

    import numpy as np
    import pandas as pd

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    img = sq.datasets.visium_hne_image()
    adata = sq.datasets.visium_hne_adata()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.3 numpy==1.21.6 scipy==1.8.0 pandas==1.4.2 scikit-learn==1.1.0 statsmodels==0.13.2 python-igraph==0.9.10 pynndescent==0.5.7
    squidpy==1.2.0
      0%|          | 0.00/380M [00:00<?, ?B/s]      0%|          | 56.0k/380M [00:00<22:13, 299kB/s]      0%|          | 176k/380M [00:00<13:22, 496kB/s]       0%|          | 688k/380M [00:00<04:24, 1.51MB/s]      1%|          | 1.99M/380M [00:00<01:25, 4.62MB/s]      1%|          | 3.70M/380M [00:00<00:48, 8.12MB/s]      2%|1         | 6.87M/380M [00:00<00:26, 15.0MB/s]      3%|2         | 10.3M/380M [00:00<00:18, 21.0MB/s]      3%|3         | 13.2M/380M [00:01<00:16, 23.5MB/s]      4%|4         | 15.9M/380M [00:01<00:15, 25.0MB/s]      5%|4         | 18.5M/380M [00:01<00:14, 25.7MB/s]      6%|5         | 22.1M/380M [00:01<00:12, 29.3MB/s]      7%|6         | 25.8M/380M [00:01<00:11, 32.0MB/s]      8%|7         | 28.7M/380M [00:01<00:14, 26.1MB/s]      8%|8         | 31.8M/380M [00:01<00:13, 27.2MB/s]      9%|9         | 35.1M/380M [00:01<00:12, 29.2MB/s]     10%|#         | 38.4M/380M [00:01<00:11, 30.7MB/s]     11%|#1        | 42.0M/380M [00:02<00:10, 32.4MB/s]     12%|#1        | 45.6M/380M [00:02<00:10, 34.1MB/s]     13%|#2        | 49.3M/380M [00:02<00:09, 35.4MB/s]     14%|#3        | 52.3M/380M [00:02<00:12, 28.3MB/s]     15%|#4        | 55.3M/380M [00:02<00:11, 29.0MB/s]     15%|#5        | 58.7M/380M [00:02<00:10, 30.8MB/s]     16%|#6        | 61.9M/380M [00:02<00:10, 31.4MB/s]     17%|#7        | 65.4M/380M [00:02<00:10, 32.9MB/s]     18%|#8        | 69.0M/380M [00:02<00:09, 34.3MB/s]     19%|#8        | 72.1M/380M [00:03<00:09, 34.0MB/s]     20%|#9        | 75.7M/380M [00:03<00:09, 35.0MB/s]     21%|##        | 78.7M/380M [00:03<00:11, 28.1MB/s]     22%|##1       | 81.8M/380M [00:03<00:10, 28.9MB/s]     22%|##2       | 85.2M/380M [00:03<00:10, 30.5MB/s]     23%|##3       | 88.8M/380M [00:03<00:09, 32.6MB/s]     24%|##4       | 92.1M/380M [00:03<00:09, 33.0MB/s]     25%|##5       | 95.4M/380M [00:03<00:08, 33.5MB/s]     26%|##5       | 98.5M/380M [00:03<00:08, 33.4MB/s]     27%|##6       | 102M/380M [00:04<00:08, 33.0MB/s]      27%|##7       | 104M/380M [00:04<00:09, 31.0MB/s]     28%|##8       | 108M/380M [00:04<00:08, 32.8MB/s]     29%|##9       | 111M/380M [00:04<00:10, 27.0MB/s]     30%|##9       | 114M/380M [00:04<00:09, 28.8MB/s]     31%|###       | 117M/380M [00:04<00:08, 31.0MB/s]     32%|###1      | 121M/380M [00:04<00:08, 32.2MB/s]     33%|###2      | 124M/380M [00:04<00:08, 31.8MB/s]     34%|###3      | 127M/380M [00:04<00:08, 32.8MB/s]     34%|###4      | 131M/380M [00:04<00:07, 34.3MB/s]     35%|###5      | 134M/380M [00:05<00:09, 28.1MB/s]     36%|###6      | 137M/380M [00:05<00:08, 29.2MB/s]     37%|###7      | 141M/380M [00:05<00:08, 31.3MB/s]     38%|###7      | 144M/380M [00:05<00:07, 32.4MB/s]     39%|###8      | 147M/380M [00:05<00:07, 32.7MB/s]     40%|###9      | 151M/380M [00:05<00:07, 33.6MB/s]     41%|####      | 155M/380M [00:05<00:06, 34.9MB/s]     41%|####1     | 158M/380M [00:05<00:08, 28.0MB/s]     42%|####2     | 161M/380M [00:06<00:07, 30.2MB/s]     43%|####3     | 164M/380M [00:06<00:07, 29.7MB/s]     44%|####4     | 167M/380M [00:06<00:06, 32.1MB/s]     45%|####4     | 170M/380M [00:06<00:07, 31.1MB/s]     46%|####5     | 174M/380M [00:06<00:06, 32.1MB/s]     47%|####6     | 177M/380M [00:06<00:06, 33.1MB/s]     48%|####7     | 180M/380M [00:06<00:06, 34.3MB/s]     48%|####8     | 184M/380M [00:06<00:07, 28.2MB/s]     49%|####9     | 187M/380M [00:06<00:06, 29.5MB/s]     50%|#####     | 190M/380M [00:07<00:06, 31.0MB/s]     51%|#####1    | 194M/380M [00:07<00:05, 32.9MB/s]     52%|#####2    | 198M/380M [00:07<00:05, 34.0MB/s]     53%|#####2    | 201M/380M [00:07<00:05, 34.6MB/s]     54%|#####3    | 204M/380M [00:07<00:06, 28.0MB/s]     55%|#####4    | 207M/380M [00:07<00:06, 28.8MB/s]     55%|#####5    | 211M/380M [00:07<00:05, 30.5MB/s]     56%|#####6    | 214M/380M [00:07<00:05, 32.4MB/s]     57%|#####7    | 218M/380M [00:07<00:05, 33.8MB/s]     58%|#####8    | 221M/380M [00:08<00:04, 34.5MB/s]     59%|#####9    | 224M/380M [00:08<00:05, 28.4MB/s]     60%|#####9    | 228M/380M [00:08<00:05, 28.9MB/s]     61%|######    | 231M/380M [00:08<00:05, 30.4MB/s]     62%|######1   | 234M/380M [00:08<00:04, 32.1MB/s]     63%|######2   | 238M/380M [00:08<00:04, 33.2MB/s]     63%|######3   | 241M/380M [00:08<00:04, 33.4MB/s]     64%|######4   | 245M/380M [00:08<00:04, 34.6MB/s]     65%|######5   | 248M/380M [00:08<00:04, 28.1MB/s]     66%|######6   | 251M/380M [00:09<00:04, 29.1MB/s]     67%|######6   | 255M/380M [00:09<00:04, 31.4MB/s]     68%|######7   | 258M/380M [00:09<00:03, 32.7MB/s]     69%|######8   | 262M/380M [00:09<00:03, 34.1MB/s]     70%|######9   | 265M/380M [00:09<00:03, 33.8MB/s]     71%|#######   | 268M/380M [00:09<00:03, 34.6MB/s]     71%|#######1  | 271M/380M [00:09<00:04, 28.0MB/s]     72%|#######2  | 274M/380M [00:09<00:03, 28.5MB/s]     73%|#######3  | 278M/380M [00:09<00:03, 30.5MB/s]     74%|#######4  | 281M/380M [00:10<00:03, 32.4MB/s]     75%|#######5  | 285M/380M [00:10<00:02, 34.3MB/s]     76%|#######5  | 289M/380M [00:10<00:02, 35.4MB/s]     77%|#######6  | 292M/380M [00:10<00:03, 29.1MB/s]     78%|#######7  | 295M/380M [00:10<00:03, 29.2MB/s]     78%|#######8  | 298M/380M [00:10<00:02, 30.3MB/s]     79%|#######9  | 301M/380M [00:10<00:02, 31.0MB/s]     80%|########  | 305M/380M [00:10<00:02, 32.4MB/s]     81%|########1 | 308M/380M [00:10<00:02, 32.2MB/s]     82%|########1 | 311M/380M [00:11<00:02, 33.4MB/s]     83%|########2 | 315M/380M [00:11<00:02, 34.0MB/s]     84%|########3 | 318M/380M [00:11<00:02, 28.4MB/s]     84%|########4 | 321M/380M [00:11<00:02, 28.8MB/s]     85%|########5 | 324M/380M [00:11<00:01, 29.9MB/s]     86%|########6 | 328M/380M [00:11<00:01, 31.5MB/s]     87%|########7 | 331M/380M [00:11<00:01, 33.4MB/s]     88%|########7 | 334M/380M [00:11<00:01, 32.9MB/s]     89%|########8 | 338M/380M [00:11<00:01, 33.6MB/s]     90%|########9 | 341M/380M [00:11<00:01, 35.1MB/s]     91%|######### | 344M/380M [00:12<00:01, 28.8MB/s]     91%|#########1| 347M/380M [00:12<00:01, 28.9MB/s]     92%|#########2| 351M/380M [00:12<00:01, 29.7MB/s]     93%|#########3| 354M/380M [00:12<00:00, 31.6MB/s]     94%|#########4| 357M/380M [00:12<00:00, 32.6MB/s]     95%|#########4| 360M/380M [00:12<00:00, 32.6MB/s]     96%|#########5| 364M/380M [00:12<00:00, 32.9MB/s]     97%|#########6| 367M/380M [00:12<00:00, 34.2MB/s]     98%|#########7| 371M/380M [00:13<00:00, 29.2MB/s]     98%|#########8| 374M/380M [00:13<00:00, 29.1MB/s]     99%|#########9| 377M/380M [00:13<00:00, 30.6MB/s]    100%|##########| 380M/380M [00:13<00:00, 29.9MB/s]
      0%|          | 0.00/314M [00:00<?, ?B/s]      0%|          | 40.0k/314M [00:00<25:47, 213kB/s]      0%|          | 144k/314M [00:00<09:31, 576kB/s]       0%|          | 416k/314M [00:00<03:53, 1.41MB/s]      0%|          | 872k/314M [00:00<02:48, 1.95MB/s]      1%|          | 2.20M/314M [00:00<01:01, 5.31MB/s]      1%|1         | 4.70M/314M [00:00<00:28, 11.3MB/s]      3%|2         | 8.11M/314M [00:00<00:17, 18.3MB/s]      4%|3         | 11.4M/314M [00:00<00:13, 23.1MB/s]      5%|4         | 14.9M/314M [00:01<00:11, 27.0MB/s]      6%|5         | 17.9M/314M [00:01<00:13, 23.0MB/s]      7%|6         | 21.5M/314M [00:01<00:11, 26.8MB/s]      8%|8         | 25.2M/314M [00:01<00:10, 30.0MB/s]      9%|9         | 28.8M/314M [00:01<00:09, 32.1MB/s]     10%|#         | 32.3M/314M [00:01<00:08, 33.3MB/s]     11%|#1        | 35.7M/314M [00:01<00:10, 27.5MB/s]     12%|#2        | 39.1M/314M [00:01<00:09, 29.5MB/s]     14%|#3        | 42.6M/314M [00:02<00:09, 31.4MB/s]     15%|#4        | 46.1M/314M [00:02<00:08, 32.9MB/s]     16%|#5        | 49.7M/314M [00:02<00:08, 34.2MB/s]     17%|#6        | 52.8M/314M [00:02<00:08, 33.8MB/s]     18%|#7        | 56.2M/314M [00:02<00:09, 27.9MB/s]     19%|#9        | 59.8M/314M [00:02<00:08, 30.3MB/s]     20%|##        | 63.3M/314M [00:02<00:08, 32.1MB/s]     21%|##1       | 66.5M/314M [00:02<00:07, 32.5MB/s]     22%|##2       | 69.9M/314M [00:02<00:07, 33.4MB/s]     23%|##3       | 73.3M/314M [00:03<00:07, 33.9MB/s]     24%|##4       | 76.8M/314M [00:03<00:07, 31.2MB/s]     25%|##5       | 79.9M/314M [00:03<00:08, 28.5MB/s]     27%|##6       | 83.6M/314M [00:03<00:07, 31.2MB/s]     28%|##7       | 86.9M/314M [00:03<00:07, 32.1MB/s]     29%|##8       | 90.3M/314M [00:03<00:07, 33.1MB/s]     30%|##9       | 93.8M/314M [00:03<00:06, 34.1MB/s]     31%|###       | 96.8M/314M [00:03<00:06, 33.2MB/s]     32%|###1      | 100M/314M [00:03<00:07, 31.0MB/s]      33%|###2      | 103M/314M [00:04<00:07, 28.4MB/s]     34%|###4      | 107M/314M [00:04<00:07, 30.5MB/s]     35%|###5      | 110M/314M [00:04<00:06, 31.9MB/s]     36%|###6      | 114M/314M [00:04<00:06, 33.4MB/s]     37%|###7      | 117M/314M [00:04<00:06, 34.3MB/s]     38%|###8      | 120M/314M [00:04<00:05, 33.9MB/s]     39%|###9      | 124M/314M [00:04<00:06, 30.9MB/s]     40%|####      | 127M/314M [00:04<00:06, 28.1MB/s]     41%|####1     | 130M/314M [00:04<00:06, 30.1MB/s]     43%|####2     | 134M/314M [00:05<00:05, 31.9MB/s]     44%|####3     | 137M/314M [00:05<00:05, 32.9MB/s]     45%|####4     | 140M/314M [00:05<00:05, 32.6MB/s]     46%|####5     | 144M/314M [00:05<00:05, 33.9MB/s]     47%|####6     | 147M/314M [00:05<00:05, 31.2MB/s]     48%|####7     | 150M/314M [00:05<00:06, 28.5MB/s]     49%|####8     | 154M/314M [00:05<00:05, 30.7MB/s]     50%|#####     | 157M/314M [00:05<00:05, 32.7MB/s]     51%|#####1    | 161M/314M [00:05<00:04, 33.4MB/s]     52%|#####2    | 165M/314M [00:06<00:04, 34.6MB/s]     53%|#####3    | 168M/314M [00:06<00:04, 31.1MB/s]     54%|#####4    | 171M/314M [00:06<00:05, 28.4MB/s]     56%|#####5    | 174M/314M [00:06<00:04, 30.9MB/s]     57%|#####6    | 178M/314M [00:06<00:04, 32.5MB/s]     58%|#####7    | 182M/314M [00:06<00:04, 34.0MB/s]     59%|#####8    | 185M/314M [00:06<00:04, 32.8MB/s]     60%|#####9    | 188M/314M [00:06<00:04, 31.1MB/s]     61%|######    | 191M/314M [00:06<00:04, 28.4MB/s]     62%|######1   | 195M/314M [00:07<00:04, 30.2MB/s]     63%|######3   | 198M/314M [00:07<00:03, 31.7MB/s]     64%|######4   | 202M/314M [00:07<00:03, 33.3MB/s]     65%|######5   | 205M/314M [00:07<00:03, 33.5MB/s]     66%|######6   | 209M/314M [00:07<00:03, 34.7MB/s]     67%|######7   | 212M/314M [00:07<00:03, 31.3MB/s]     68%|######8   | 215M/314M [00:07<00:03, 28.5MB/s]     69%|######9   | 218M/314M [00:07<00:03, 30.1MB/s]     71%|#######   | 222M/314M [00:07<00:02, 32.4MB/s]     72%|#######1  | 226M/314M [00:08<00:02, 34.1MB/s]     73%|#######2  | 229M/314M [00:08<00:02, 33.3MB/s]     74%|#######3  | 232M/314M [00:08<00:02, 32.7MB/s]     75%|#######4  | 235M/314M [00:08<00:02, 31.4MB/s]     76%|#######5  | 238M/314M [00:08<00:02, 28.6MB/s]     77%|#######7  | 242M/314M [00:08<00:02, 30.6MB/s]     78%|#######8  | 245M/314M [00:08<00:02, 32.7MB/s]     79%|#######9  | 249M/314M [00:08<00:02, 33.9MB/s]     80%|########  | 252M/314M [00:08<00:01, 33.2MB/s]     81%|########1 | 255M/314M [00:09<00:01, 32.5MB/s]     82%|########2 | 259M/314M [00:09<00:01, 31.0MB/s]     83%|########3 | 262M/314M [00:09<00:01, 28.4MB/s]     84%|########4 | 265M/314M [00:09<00:01, 30.5MB/s]     86%|########5 | 269M/314M [00:09<00:01, 31.8MB/s]     87%|########6 | 272M/314M [00:09<00:01, 33.9MB/s]     88%|########7 | 275M/314M [00:09<00:01, 32.9MB/s]     89%|########8 | 279M/314M [00:09<00:01, 33.5MB/s]     90%|########9 | 282M/314M [00:09<00:01, 31.0MB/s]     91%|######### | 285M/314M [00:10<00:01, 28.5MB/s]     92%|#########1| 289M/314M [00:10<00:00, 30.9MB/s]     93%|#########3| 292M/314M [00:10<00:00, 32.8MB/s]     94%|#########4| 296M/314M [00:10<00:00, 33.1MB/s]     95%|#########5| 299M/314M [00:10<00:00, 32.8MB/s]     96%|#########6| 303M/314M [00:10<00:00, 34.4MB/s]     97%|#########7| 306M/314M [00:10<00:00, 30.8MB/s]     98%|#########8| 309M/314M [00:10<00:00, 28.4MB/s]     99%|#########9| 312M/314M [00:10<00:00, 30.7MB/s]    100%|##########| 314M/314M [00:10<00:00, 30.0MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 48-50

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    sc.pl.spatial(adata, color="cluster")




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-75

Image features
--------------
Visium datasets contain high-resolution images of the tissue that was used for the gene extraction.
Using the function :func:`squidpy.im.calculate_image_features` you can calculate image features
for each Visium spot and create a ``obs x features`` matrix in ``adata`` that can then be analyzed together
with the ``obs x gene`` gene expression matrix.

By extracting image features we are aiming to get both similar and complementary information to the
gene expression values.
Similar information is for example present in the case of a tissue with two different cell types
whose morphology is different.
Such cell type information is then contained in both the gene expression values and the tissue image features.

Squidpy contains several feature extractors and a flexible pipeline of calculating features
of different scales and sizes.
There are several detailed examples of how to use :func:`squidpy.im.calculate_image_features`.
:ref:`sphx_glr_auto_examples_image_compute_features.py` provides a good starting point for learning more.

Here, we will extract `summary` features at different crop sizes and scales to allow
the calculation of multi-scale features and `segmentation` features.
For more information on the summary features,
also refer to :ref:`sphx_glr_auto_examples_image_compute_summary_features.py`.

.. GENERATED FROM PYTHON SOURCE LINES 75-97

.. code-block:: default


    # calculate features for different scales (higher value means more context)
    for scale in [1.0, 2.0]:
        feature_name = f"features_summary_scale{scale}"
        sq.im.calculate_image_features(
            adata,
            img.compute(),
            features="summary",
            key_added=feature_name,
            n_jobs=4,
            scale=scale,
        )


    # combine features in one dataframe
    adata.obsm["features"] = pd.concat(
        [adata.obsm[f] for f in adata.obsm.keys() if "features_summary" in f], axis="columns"
    )
    # make sure that we have no duplicated feature names in the combined table
    adata.obsm["features"].columns = ad.utils.make_index_unique(adata.obsm["features"].columns)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/2688 [00:00<?, ?/s]      0%|          | 1/2688 [00:11<8:34:34, 11.49s/]      0%|          | 13/2688 [00:11<28:35,  1.56/s]       1%|          | 25/2688 [00:11<12:22,  3.58/s]      1%|1         | 36/2688 [00:11<07:14,  6.10/s]      2%|2         | 63/2688 [00:11<02:57, 14.76/s]      4%|3         | 98/2688 [00:12<01:26, 29.78/s]      5%|5         | 143/2688 [00:12<00:46, 55.04/s]      7%|7         | 190/2688 [00:12<00:28, 87.61/s]      9%|8         | 237/2688 [00:12<00:19, 126.18/s]     11%|#         | 283/2688 [00:12<00:14, 167.80/s]     12%|#2        | 330/2688 [00:12<00:11, 213.21/s]     14%|#3        | 376/2688 [00:12<00:08, 257.06/s]     16%|#5        | 424/2688 [00:12<00:07, 299.78/s]     18%|#7        | 472/2688 [00:12<00:06, 338.16/s]     19%|#9        | 520/2688 [00:12<00:05, 369.05/s]     21%|##1       | 567/2688 [00:13<00:05, 394.11/s]     23%|##2       | 614/2688 [00:13<00:05, 413.40/s]     25%|##4       | 662/2688 [00:13<00:04, 431.67/s]     26%|##6       | 709/2688 [00:13<00:04, 441.89/s]     28%|##8       | 756/2688 [00:13<00:04, 449.00/s]     30%|##9       | 804/2688 [00:13<00:04, 456.17/s]     32%|###1      | 851/2688 [00:13<00:04, 457.76/s]     33%|###3      | 900/2688 [00:13<00:03, 465.16/s]     35%|###5      | 948/2688 [00:13<00:03, 464.18/s]     37%|###7      | 997/2688 [00:13<00:03, 468.09/s]     39%|###8      | 1045/2688 [00:14<00:03, 467.83/s]     41%|####      | 1092/2688 [00:14<00:03, 465.42/s]     42%|####2     | 1139/2688 [00:14<00:03, 465.62/s]     44%|####4     | 1186/2688 [00:14<00:03, 463.24/s]     46%|####5     | 1233/2688 [00:14<00:03, 463.44/s]     48%|####7     | 1280/2688 [00:14<00:03, 461.21/s]     49%|####9     | 1327/2688 [00:14<00:02, 460.93/s]     51%|#####1    | 1374/2688 [00:14<00:02, 458.20/s]     53%|#####2    | 1422/2688 [00:14<00:02, 464.41/s]     55%|#####4    | 1469/2688 [00:15<00:02, 452.27/s]     56%|#####6    | 1517/2688 [00:15<00:02, 458.40/s]     58%|#####8    | 1565/2688 [00:15<00:02, 464.30/s]     60%|#####9    | 1612/2688 [00:15<00:02, 462.97/s]     62%|######1   | 1659/2688 [00:15<00:02, 460.06/s]     63%|######3   | 1706/2688 [00:15<00:02, 456.01/s]     65%|######5   | 1754/2688 [00:15<00:02, 459.06/s]     67%|######7   | 1801/2688 [00:15<00:01, 457.79/s]     69%|######8   | 1850/2688 [00:15<00:01, 463.68/s]     71%|#######   | 1898/2688 [00:15<00:01, 465.74/s]     72%|#######2  | 1945/2688 [00:16<00:01, 459.57/s]     74%|#######4  | 1991/2688 [00:16<00:01, 459.11/s]     76%|#######5  | 2038/2688 [00:16<00:01, 461.96/s]     78%|#######7  | 2085/2688 [00:16<00:01, 459.92/s]     79%|#######9  | 2132/2688 [00:16<00:01, 458.17/s]     81%|########1 | 2179/2688 [00:16<00:01, 460.87/s]     83%|########2 | 2227/2688 [00:16<00:00, 463.90/s]     85%|########4 | 2275/2688 [00:16<00:00, 466.16/s]     86%|########6 | 2323/2688 [00:16<00:00, 469.29/s]     88%|########8 | 2370/2688 [00:16<00:00, 467.76/s]     90%|########9 | 2417/2688 [00:17<00:00, 464.34/s]     92%|#########1| 2464/2688 [00:17<00:00, 465.70/s]     93%|#########3| 2512/2688 [00:17<00:00, 466.49/s]     95%|#########5| 2559/2688 [00:17<00:00, 467.00/s]     97%|#########7| 2608/2688 [00:17<00:00, 469.62/s]     99%|#########8| 2655/2688 [00:17<00:00, 398.26/s]    100%|##########| 2688/2688 [00:17<00:00, 150.73/s]
      0%|          | 0/2688 [00:00<?, ?/s]      0%|          | 1/2688 [00:00<35:59,  1.24/s]      0%|          | 2/2688 [00:00<19:06,  2.34/s]      0%|          | 10/2688 [00:01<03:32, 12.58/s]      1%|          | 18/2688 [00:01<01:55, 23.09/s]      1%|          | 24/2688 [00:01<01:33, 28.63/s]      1%|1         | 31/2688 [00:01<01:13, 36.04/s]      1%|1         | 39/2688 [00:01<01:00, 44.02/s]      2%|1         | 47/2688 [00:01<00:52, 50.44/s]      2%|2         | 55/2688 [00:01<00:47, 55.12/s]      2%|2         | 63/2688 [00:02<00:44, 59.10/s]      3%|2         | 71/2688 [00:02<00:41, 62.48/s]      3%|2         | 79/2688 [00:02<00:39, 65.56/s]      3%|3         | 87/2688 [00:02<00:39, 66.29/s]      4%|3         | 95/2688 [00:02<00:38, 68.07/s]      4%|3         | 103/2688 [00:02<00:37, 68.84/s]      4%|4         | 110/2688 [00:02<00:37, 69.13/s]      4%|4         | 117/2688 [00:02<00:38, 66.70/s]      5%|4         | 125/2688 [00:02<00:37, 68.02/s]      5%|4         | 133/2688 [00:03<00:37, 67.77/s]      5%|5         | 141/2688 [00:03<00:37, 68.71/s]      6%|5         | 149/2688 [00:03<00:36, 69.09/s]      6%|5         | 157/2688 [00:03<00:37, 68.09/s]      6%|6         | 165/2688 [00:03<00:36, 68.94/s]      6%|6         | 173/2688 [00:03<00:36, 68.70/s]      7%|6         | 181/2688 [00:03<00:35, 69.82/s]      7%|7         | 189/2688 [00:03<00:35, 69.62/s]      7%|7         | 197/2688 [00:03<00:36, 69.04/s]      8%|7         | 205/2688 [00:04<00:35, 69.65/s]      8%|7         | 213/2688 [00:04<00:35, 69.89/s]      8%|8         | 221/2688 [00:04<00:35, 68.59/s]      9%|8         | 229/2688 [00:04<00:35, 69.34/s]      9%|8         | 237/2688 [00:04<00:35, 69.42/s]      9%|9         | 244/2688 [00:04<00:36, 66.22/s]      9%|9         | 252/2688 [00:04<00:37, 65.39/s]     10%|9         | 260/2688 [00:04<00:36, 66.69/s]     10%|9         | 268/2688 [00:04<00:35, 67.85/s]     10%|#         | 276/2688 [00:05<00:35, 67.49/s]     11%|#         | 284/2688 [00:05<00:35, 68.12/s]     11%|#         | 292/2688 [00:05<00:34, 68.77/s]     11%|#1        | 300/2688 [00:05<00:34, 68.85/s]     11%|#1        | 308/2688 [00:05<00:34, 68.73/s]     12%|#1        | 316/2688 [00:05<00:34, 68.63/s]     12%|#2        | 324/2688 [00:05<00:33, 69.80/s]     12%|#2        | 332/2688 [00:05<00:34, 68.83/s]     13%|#2        | 340/2688 [00:06<00:33, 69.79/s]     13%|#2        | 348/2688 [00:06<00:33, 69.05/s]     13%|#3        | 356/2688 [00:06<00:33, 69.60/s]     14%|#3        | 364/2688 [00:06<00:33, 70.22/s]     14%|#3        | 372/2688 [00:06<00:33, 69.84/s]     14%|#4        | 380/2688 [00:06<00:32, 69.96/s]     14%|#4        | 388/2688 [00:06<00:33, 69.63/s]     15%|#4        | 396/2688 [00:06<00:32, 69.96/s]     15%|#5        | 404/2688 [00:06<00:32, 69.87/s]     15%|#5        | 412/2688 [00:07<00:32, 70.37/s]     16%|#5        | 420/2688 [00:07<00:32, 69.93/s]     16%|#5        | 428/2688 [00:07<00:32, 70.52/s]     16%|#6        | 436/2688 [00:07<00:32, 69.85/s]     17%|#6        | 444/2688 [00:07<00:32, 69.29/s]     17%|#6        | 452/2688 [00:07<00:32, 69.76/s]     17%|#7        | 460/2688 [00:07<00:32, 69.39/s]     17%|#7        | 468/2688 [00:07<00:31, 69.55/s]     18%|#7        | 476/2688 [00:07<00:31, 69.65/s]     18%|#8        | 484/2688 [00:08<00:31, 69.91/s]     18%|#8        | 492/2688 [00:08<00:31, 69.34/s]     19%|#8        | 500/2688 [00:08<00:31, 70.20/s]     19%|#8        | 508/2688 [00:08<00:31, 69.10/s]     19%|#9        | 516/2688 [00:08<00:30, 70.67/s]     19%|#9        | 524/2688 [00:08<00:31, 69.52/s]     20%|#9        | 532/2688 [00:08<00:31, 68.71/s]     20%|##        | 540/2688 [00:08<00:30, 69.94/s]     20%|##        | 548/2688 [00:09<00:31, 69.02/s]     21%|##        | 556/2688 [00:09<00:30, 70.34/s]     21%|##        | 564/2688 [00:09<00:30, 68.85/s]     21%|##1       | 572/2688 [00:09<00:30, 68.96/s]     22%|##1       | 580/2688 [00:09<00:30, 68.81/s]     22%|##1       | 588/2688 [00:09<00:29, 70.05/s]     22%|##2       | 596/2688 [00:09<00:29, 70.05/s]     22%|##2       | 604/2688 [00:09<00:29, 70.35/s]     23%|##2       | 612/2688 [00:09<00:29, 70.05/s]     23%|##3       | 620/2688 [00:10<00:29, 69.66/s]     23%|##3       | 628/2688 [00:10<00:29, 69.10/s]     24%|##3       | 636/2688 [00:10<00:29, 69.57/s]     24%|##3       | 644/2688 [00:10<00:29, 70.03/s]     24%|##4       | 652/2688 [00:10<00:29, 69.60/s]     25%|##4       | 660/2688 [00:10<00:29, 69.87/s]     25%|##4       | 668/2688 [00:10<00:28, 69.89/s]     25%|##5       | 676/2688 [00:10<00:28, 70.55/s]     25%|##5       | 684/2688 [00:10<00:28, 69.98/s]     26%|##5       | 692/2688 [00:11<00:28, 70.94/s]     26%|##6       | 700/2688 [00:11<00:28, 70.16/s]     26%|##6       | 708/2688 [00:11<00:28, 70.47/s]     27%|##6       | 716/2688 [00:11<00:28, 70.18/s]     27%|##6       | 724/2688 [00:11<00:28, 69.93/s]     27%|##7       | 731/2688 [00:11<00:29, 67.23/s]     27%|##7       | 738/2688 [00:11<00:29, 65.80/s]     28%|##7       | 746/2688 [00:11<00:28, 68.53/s]     28%|##8       | 754/2688 [00:11<00:28, 67.81/s]     28%|##8       | 762/2688 [00:12<00:28, 68.25/s]     29%|##8       | 770/2688 [00:12<00:27, 69.93/s]     29%|##8       | 778/2688 [00:12<00:27, 68.92/s]     29%|##9       | 786/2688 [00:12<00:27, 69.20/s]     30%|##9       | 794/2688 [00:12<00:27, 68.62/s]     30%|##9       | 802/2688 [00:12<00:27, 68.83/s]     30%|###       | 810/2688 [00:12<00:26, 69.66/s]     30%|###       | 818/2688 [00:12<00:26, 70.05/s]     31%|###       | 826/2688 [00:13<00:26, 70.11/s]     31%|###1      | 834/2688 [00:13<00:26, 69.85/s]     31%|###1      | 842/2688 [00:13<00:26, 70.02/s]     32%|###1      | 850/2688 [00:13<00:26, 69.54/s]     32%|###1      | 858/2688 [00:13<00:26, 69.51/s]     32%|###2      | 866/2688 [00:13<00:26, 69.37/s]     33%|###2      | 874/2688 [00:13<00:26, 69.65/s]     33%|###2      | 883/2688 [00:13<00:25, 69.72/s]     33%|###3      | 891/2688 [00:13<00:26, 68.47/s]     33%|###3      | 899/2688 [00:14<00:25, 69.78/s]     34%|###3      | 907/2688 [00:14<00:25, 68.84/s]     34%|###4      | 915/2688 [00:14<00:25, 69.95/s]     34%|###4      | 923/2688 [00:14<00:25, 70.03/s]     35%|###4      | 931/2688 [00:14<00:25, 69.51/s]     35%|###4      | 939/2688 [00:14<00:24, 70.72/s]     35%|###5      | 947/2688 [00:14<00:25, 68.92/s]     36%|###5      | 955/2688 [00:14<00:24, 70.14/s]     36%|###5      | 963/2688 [00:14<00:25, 68.86/s]     36%|###6      | 971/2688 [00:15<00:25, 68.31/s]     36%|###6      | 979/2688 [00:15<00:24, 68.99/s]     37%|###6      | 987/2688 [00:15<00:24, 68.67/s]     37%|###7      | 995/2688 [00:15<00:24, 69.05/s]     37%|###7      | 1003/2688 [00:15<00:24, 69.52/s]     38%|###7      | 1011/2688 [00:15<00:24, 69.54/s]     38%|###7      | 1019/2688 [00:15<00:24, 69.08/s]     38%|###8      | 1027/2688 [00:15<00:23, 69.55/s]     39%|###8      | 1035/2688 [00:16<00:23, 69.60/s]     39%|###8      | 1043/2688 [00:16<00:23, 70.32/s]     39%|###9      | 1051/2688 [00:16<00:23, 70.10/s]     39%|###9      | 1059/2688 [00:16<00:23, 69.78/s]     40%|###9      | 1067/2688 [00:16<00:23, 69.70/s]     40%|###9      | 1075/2688 [00:16<00:23, 69.69/s]     40%|####      | 1083/2688 [00:16<00:22, 69.82/s]     41%|####      | 1091/2688 [00:16<00:22, 69.48/s]     41%|####      | 1099/2688 [00:16<00:22, 69.45/s]     41%|####1     | 1107/2688 [00:17<00:22, 70.25/s]     41%|####1     | 1115/2688 [00:17<00:22, 70.88/s]     42%|####1     | 1123/2688 [00:17<00:21, 71.27/s]     42%|####2     | 1131/2688 [00:17<00:22, 70.57/s]     42%|####2     | 1139/2688 [00:17<00:22, 70.15/s]     43%|####2     | 1147/2688 [00:17<00:21, 70.53/s]     43%|####2     | 1155/2688 [00:17<00:21, 70.44/s]     43%|####3     | 1163/2688 [00:17<00:21, 70.28/s]     44%|####3     | 1171/2688 [00:17<00:21, 70.06/s]     44%|####3     | 1179/2688 [00:18<00:21, 70.22/s]     44%|####4     | 1187/2688 [00:18<00:21, 70.23/s]     44%|####4     | 1195/2688 [00:18<00:21, 69.66/s]     45%|####4     | 1202/2688 [00:18<00:21, 67.58/s]     45%|####4     | 1209/2688 [00:18<00:22, 66.49/s]     45%|####5     | 1217/2688 [00:18<00:21, 67.59/s]     46%|####5     | 1225/2688 [00:18<00:21, 68.32/s]     46%|####5     | 1233/2688 [00:18<00:21, 68.21/s]     46%|####6     | 1241/2688 [00:18<00:21, 68.60/s]     46%|####6     | 1249/2688 [00:19<00:20, 69.69/s]     47%|####6     | 1257/2688 [00:19<00:20, 69.78/s]     47%|####7     | 1265/2688 [00:19<00:20, 68.96/s]     47%|####7     | 1273/2688 [00:19<00:20, 69.26/s]     48%|####7     | 1281/2688 [00:19<00:20, 70.18/s]     48%|####7     | 1289/2688 [00:19<00:19, 70.84/s]     48%|####8     | 1297/2688 [00:19<00:19, 69.59/s]     49%|####8     | 1305/2688 [00:19<00:19, 69.92/s]     49%|####8     | 1313/2688 [00:20<00:19, 70.02/s]     49%|####9     | 1321/2688 [00:20<00:19, 70.80/s]     49%|####9     | 1329/2688 [00:20<00:19, 69.06/s]     50%|####9     | 1337/2688 [00:20<00:19, 69.93/s]     50%|#####     | 1345/2688 [00:20<00:19, 69.34/s]     50%|#####     | 1353/2688 [00:20<00:19, 69.31/s]     51%|#####     | 1361/2688 [00:20<00:19, 69.68/s]     51%|#####     | 1369/2688 [00:20<00:19, 69.13/s]     51%|#####1    | 1377/2688 [00:20<00:18, 70.37/s]     52%|#####1    | 1385/2688 [00:21<00:18, 69.32/s]     52%|#####1    | 1393/2688 [00:21<00:18, 70.05/s]     52%|#####2    | 1401/2688 [00:21<00:18, 70.05/s]     52%|#####2    | 1409/2688 [00:21<00:18, 68.87/s]     53%|#####2    | 1416/2688 [00:21<00:18, 68.01/s]     53%|#####2    | 1423/2688 [00:21<00:18, 67.55/s]     53%|#####3    | 1431/2688 [00:21<00:18, 67.69/s]     54%|#####3    | 1439/2688 [00:21<00:18, 68.74/s]     54%|#####3    | 1447/2688 [00:21<00:18, 68.06/s]     54%|#####4    | 1455/2688 [00:22<00:18, 67.34/s]     54%|#####4    | 1463/2688 [00:22<00:18, 67.56/s]     55%|#####4    | 1471/2688 [00:22<00:17, 67.99/s]     55%|#####5    | 1479/2688 [00:22<00:17, 67.95/s]     55%|#####5    | 1487/2688 [00:22<00:17, 69.62/s]     56%|#####5    | 1495/2688 [00:22<00:17, 70.06/s]     56%|#####5    | 1503/2688 [00:22<00:16, 69.83/s]     56%|#####6    | 1511/2688 [00:22<00:17, 68.49/s]     57%|#####6    | 1519/2688 [00:23<00:16, 68.86/s]     57%|#####6    | 1527/2688 [00:23<00:16, 68.83/s]     57%|#####7    | 1535/2688 [00:23<00:16, 70.08/s]     57%|#####7    | 1543/2688 [00:23<00:16, 70.73/s]     58%|#####7    | 1551/2688 [00:23<00:16, 70.78/s]     58%|#####7    | 1559/2688 [00:23<00:16, 69.61/s]     58%|#####8    | 1567/2688 [00:23<00:16, 68.54/s]     59%|#####8    | 1575/2688 [00:23<00:16, 68.99/s]     59%|#####8    | 1583/2688 [00:23<00:15, 70.02/s]     59%|#####9    | 1591/2688 [00:24<00:15, 70.15/s]     59%|#####9    | 1599/2688 [00:24<00:15, 70.47/s]     60%|#####9    | 1607/2688 [00:24<00:15, 70.51/s]     60%|######    | 1615/2688 [00:24<00:15, 70.66/s]     60%|######    | 1623/2688 [00:24<00:15, 70.63/s]     61%|######    | 1631/2688 [00:24<00:14, 70.61/s]     61%|######    | 1639/2688 [00:24<00:14, 70.69/s]     61%|######1   | 1647/2688 [00:24<00:14, 70.06/s]     62%|######1   | 1655/2688 [00:24<00:14, 70.37/s]     62%|######1   | 1663/2688 [00:25<00:14, 69.64/s]     62%|######2   | 1670/2688 [00:25<00:14, 69.63/s]     62%|######2   | 1677/2688 [00:25<00:14, 67.57/s]     63%|######2   | 1685/2688 [00:25<00:14, 67.06/s]     63%|######2   | 1693/2688 [00:25<00:14, 69.09/s]     63%|######3   | 1701/2688 [00:25<00:14, 69.54/s]     64%|######3   | 1709/2688 [00:25<00:14, 68.71/s]     64%|######3   | 1717/2688 [00:25<00:14, 68.34/s]     64%|######4   | 1725/2688 [00:25<00:13, 69.43/s]     64%|######4   | 1733/2688 [00:26<00:13, 70.01/s]     65%|######4   | 1741/2688 [00:26<00:13, 69.58/s]     65%|######5   | 1749/2688 [00:26<00:13, 69.19/s]     65%|######5   | 1757/2688 [00:26<00:13, 69.37/s]     66%|######5   | 1765/2688 [00:26<00:13, 70.00/s]     66%|######5   | 1773/2688 [00:26<00:12, 70.81/s]     66%|######6   | 1781/2688 [00:26<00:12, 70.34/s]     67%|######6   | 1789/2688 [00:26<00:12, 69.92/s]     67%|######6   | 1796/2688 [00:26<00:12, 69.55/s]     67%|######7   | 1803/2688 [00:27<00:13, 66.74/s]     67%|######7   | 1811/2688 [00:27<00:12, 68.45/s]     68%|######7   | 1819/2688 [00:27<00:12, 69.50/s]     68%|######7   | 1827/2688 [00:27<00:12, 68.04/s]     68%|######8   | 1835/2688 [00:27<00:12, 68.57/s]     69%|######8   | 1843/2688 [00:27<00:12, 68.75/s]     69%|######8   | 1851/2688 [00:27<00:12, 68.69/s]     69%|######9   | 1859/2688 [00:27<00:12, 68.79/s]     69%|######9   | 1867/2688 [00:28<00:12, 67.85/s]     70%|######9   | 1875/2688 [00:28<00:11, 68.61/s]     70%|#######   | 1883/2688 [00:28<00:11, 69.00/s]     70%|#######   | 1890/2688 [00:28<00:11, 68.52/s]     71%|#######   | 1897/2688 [00:28<00:11, 67.27/s]     71%|#######   | 1905/2688 [00:28<00:11, 68.29/s]     71%|#######1  | 1913/2688 [00:28<00:11, 68.36/s]     71%|#######1  | 1921/2688 [00:28<00:11, 67.97/s]     72%|#######1  | 1929/2688 [00:28<00:11, 68.82/s]     72%|#######2  | 1937/2688 [00:29<00:10, 68.28/s]     72%|#######2  | 1945/2688 [00:29<00:10, 68.98/s]     73%|#######2  | 1953/2688 [00:29<00:10, 69.73/s]     73%|#######2  | 1961/2688 [00:29<00:10, 69.67/s]     73%|#######3  | 1969/2688 [00:29<00:10, 69.96/s]     74%|#######3  | 1977/2688 [00:29<00:10, 69.21/s]     74%|#######3  | 1985/2688 [00:29<00:10, 69.06/s]     74%|#######4  | 1993/2688 [00:29<00:09, 69.61/s]     74%|#######4  | 2001/2688 [00:29<00:09, 69.36/s]     75%|#######4  | 2009/2688 [00:30<00:09, 69.67/s]     75%|#######5  | 2017/2688 [00:30<00:09, 68.77/s]     75%|#######5  | 2025/2688 [00:30<00:09, 68.14/s]     76%|#######5  | 2033/2688 [00:30<00:09, 68.99/s]     76%|#######5  | 2041/2688 [00:30<00:09, 69.97/s]     76%|#######6  | 2049/2688 [00:30<00:09, 68.78/s]     77%|#######6  | 2057/2688 [00:30<00:09, 68.92/s]     77%|#######6  | 2065/2688 [00:30<00:08, 69.46/s]     77%|#######7  | 2073/2688 [00:31<00:08, 69.28/s]     77%|#######7  | 2081/2688 [00:31<00:08, 68.73/s]     78%|#######7  | 2089/2688 [00:31<00:08, 69.42/s]     78%|#######7  | 2096/2688 [00:31<00:08, 69.13/s]     78%|#######8  | 2103/2688 [00:31<00:08, 68.46/s]     79%|#######8  | 2111/2688 [00:31<00:08, 68.15/s]     79%|#######8  | 2119/2688 [00:31<00:08, 69.53/s]     79%|#######9  | 2127/2688 [00:31<00:08, 68.96/s]     79%|#######9  | 2135/2688 [00:31<00:07, 69.67/s]     80%|#######9  | 2143/2688 [00:32<00:07, 68.37/s]     80%|########  | 2151/2688 [00:32<00:07, 69.40/s]     80%|########  | 2159/2688 [00:32<00:07, 68.87/s]     81%|########  | 2167/2688 [00:32<00:07, 68.83/s]     81%|########  | 2175/2688 [00:32<00:07, 68.63/s]     81%|########1 | 2183/2688 [00:32<00:07, 69.24/s]     82%|########1 | 2191/2688 [00:32<00:07, 69.15/s]     82%|########1 | 2199/2688 [00:32<00:07, 69.57/s]     82%|########2 | 2207/2688 [00:32<00:06, 69.31/s]     82%|########2 | 2215/2688 [00:33<00:06, 69.54/s]     83%|########2 | 2223/2688 [00:33<00:06, 69.69/s]     83%|########2 | 2231/2688 [00:33<00:06, 69.81/s]     83%|########3 | 2239/2688 [00:33<00:06, 69.28/s]     84%|########3 | 2247/2688 [00:33<00:06, 69.09/s]     84%|########3 | 2255/2688 [00:33<00:06, 69.58/s]     84%|########4 | 2263/2688 [00:33<00:06, 68.75/s]     84%|########4 | 2271/2688 [00:33<00:06, 68.23/s]     85%|########4 | 2279/2688 [00:33<00:05, 70.36/s]     85%|########5 | 2287/2688 [00:34<00:05, 70.27/s]     85%|########5 | 2295/2688 [00:34<00:05, 68.72/s]     86%|########5 | 2303/2688 [00:34<00:05, 70.07/s]     86%|########5 | 2311/2688 [00:34<00:05, 69.28/s]     86%|########6 | 2319/2688 [00:34<00:05, 69.37/s]     87%|########6 | 2327/2688 [00:34<00:05, 69.26/s]     87%|########6 | 2335/2688 [00:34<00:04, 70.80/s]     87%|########7 | 2343/2688 [00:34<00:04, 69.97/s]     87%|########7 | 2351/2688 [00:35<00:04, 70.53/s]     88%|########7 | 2359/2688 [00:35<00:04, 69.64/s]     88%|########8 | 2367/2688 [00:35<00:04, 68.62/s]     88%|########8 | 2375/2688 [00:35<00:04, 70.03/s]     89%|########8 | 2383/2688 [00:35<00:04, 69.14/s]     89%|########8 | 2391/2688 [00:35<00:04, 70.24/s]     89%|########9 | 2399/2688 [00:35<00:04, 69.51/s]     90%|########9 | 2407/2688 [00:35<00:04, 69.02/s]     90%|########9 | 2415/2688 [00:35<00:03, 70.76/s]     90%|######### | 2423/2688 [00:36<00:03, 70.58/s]     90%|######### | 2431/2688 [00:36<00:03, 69.84/s]     91%|######### | 2439/2688 [00:36<00:03, 69.59/s]     91%|#########1| 2447/2688 [00:36<00:03, 68.99/s]     91%|#########1| 2455/2688 [00:36<00:03, 68.55/s]     92%|#########1| 2463/2688 [00:36<00:03, 68.91/s]     92%|#########1| 2471/2688 [00:36<00:03, 69.40/s]     92%|#########2| 2479/2688 [00:36<00:03, 68.99/s]     93%|#########2| 2487/2688 [00:36<00:02, 70.00/s]     93%|#########2| 2495/2688 [00:37<00:02, 70.32/s]     93%|#########3| 2503/2688 [00:37<00:02, 69.88/s]     93%|#########3| 2511/2688 [00:37<00:02, 69.46/s]     94%|#########3| 2519/2688 [00:37<00:02, 70.20/s]     94%|#########4| 2527/2688 [00:37<00:02, 68.91/s]     94%|#########4| 2535/2688 [00:37<00:02, 68.27/s]     95%|#########4| 2543/2688 [00:37<00:02, 68.44/s]     95%|#########4| 2551/2688 [00:37<00:01, 68.57/s]     95%|#########5| 2559/2688 [00:38<00:01, 69.55/s]     95%|#########5| 2567/2688 [00:38<00:01, 69.15/s]     96%|#########5| 2575/2688 [00:38<00:01, 69.27/s]     96%|#########6| 2583/2688 [00:38<00:01, 69.11/s]     96%|#########6| 2591/2688 [00:38<00:01, 68.96/s]     97%|#########6| 2599/2688 [00:38<00:01, 69.26/s]     97%|#########6| 2607/2688 [00:38<00:01, 69.12/s]     97%|#########7| 2615/2688 [00:38<00:01, 69.20/s]     98%|#########7| 2622/2688 [00:38<00:00, 68.86/s]     98%|#########7| 2629/2688 [00:39<00:00, 68.85/s]     98%|#########8| 2637/2688 [00:39<00:00, 68.22/s]     98%|#########8| 2645/2688 [00:39<00:00, 69.35/s]     99%|#########8| 2653/2688 [00:39<00:00, 67.55/s]     99%|#########8| 2661/2688 [00:39<00:00, 69.87/s]     99%|#########9| 2669/2688 [00:39<00:00, 69.04/s]    100%|#########9| 2677/2688 [00:39<00:00, 69.21/s]    100%|#########9| 2685/2688 [00:39<00:00, 69.71/s]    100%|##########| 2688/2688 [00:39<00:00, 67.38/s]




.. GENERATED FROM PYTHON SOURCE LINES 98-100

We can use the extracted image features to compute a new cluster annotation.
This could be useful to gain insights in similarities across spots based on image morphology.

.. GENERATED FROM PYTHON SOURCE LINES 100-130

.. code-block:: default


    # helper function returning a clustering
    def cluster_features(features: pd.DataFrame, like=None) -> pd.Series:
        """
        Calculate leiden clustering of features.

        Specify filter of features using `like`.
        """
        # filter features
        if like is not None:
            features = features.filter(like=like)
        # create temporary adata to calculate the clustering
        adata = ad.AnnData(features)
        # important - feature values are not scaled, so need to scale them before PCA
        sc.pp.scale(adata)
        # calculate leiden clustering
        sc.pp.pca(adata, n_comps=min(10, features.shape[1] - 1))
        sc.pp.neighbors(adata)
        sc.tl.leiden(adata)

        return adata.obs["leiden"]


    # calculate feature clusters
    adata.obs["features_cluster"] = cluster_features(adata.obsm["features"], like="summary")

    # compare feature and gene clusters
    sc.set_figure_params(facecolor="white", figsize=(8, 8))
    sc.pl.spatial(adata, color=["features_cluster", "cluster"])




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_002.png
   :alt: features_cluster, cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/tutorials/tutorial_visium_hne.py:112: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      adata = ad.AnnData(features)




.. GENERATED FROM PYTHON SOURCE LINES 131-141

Comparing gene and feature clusters, we notice that in some regions,
they look very similar, like the cluster *Fiber_tract*, or clusters around the Hippocampus
seems to be roughly recapitulated by the clusters in image feature space.
In others, the feature clusters look different, like in the cortex,
where the gene clusters show the layered structure of the cortex,
and the features clusters rather seem to show different regions of the cortex.

This is only a simple, comparative analysis of the image features,
note that you could also use the image features to e.g. compute a common image and gene clustering
by computing a shared neighbors graph (for instance on concatenated PCAs on both feature spaces).

.. GENERATED FROM PYTHON SOURCE LINES 143-167

Spatial statistics and graph analysis
-------------------------------------
Similar to other spatial data, we can investigate spatial organization
by leveraging spatial and graph statistics in Visium data.

Neighborhood enrichment
+++++++++++++++++++++++
Computing a neighborhood enrichment can help us identify spots clusters that share
a common neighborhood structure across the tissue.
We can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, and therefore are seldom a neighborhood,
the score will be low and they can be defined as *depleted*. This score is
based on a permutation-based test, and you can set
the number of permutations with the ``n_perms`` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.

.. GENERATED FROM PYTHON SOURCE LINES 167-171

.. code-block:: default

    sq.gr.spatial_neighbors(adata)
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster")




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_003.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]     20%|#9        | 197/1000 [00:00<00:00, 1963.64/s]     51%|#####1    | 511/1000 [00:00<00:00, 2652.89/s]     82%|########2 | 821/1000 [00:00<00:00, 2853.30/s]    100%|##########| 1000/1000 [00:00<00:00, 2778.98/s]




.. GENERATED FROM PYTHON SOURCE LINES 172-176

Given the spatial organization of the mouse brain coronal section,
not surprisingly we find high neighborhood enrichment the Hippocampus region:
*Pyramidal_layer_dentate_gyrus* and *Pyramidal_layer* clusters seems
to be often neighbors with the larger *Hippocampus* cluster.

.. GENERATED FROM PYTHON SOURCE LINES 178-195

Co-occurrence across spatial dimensions
+++++++++++++++++++++++++++++++++++++++
In addition to the neighbor enrichment score, we can visualize cluster co-occurrence in spatial dimensions.
This is a similar analysis of the one presented above, yet it does not operate on the connectivity matrix,
but on the original spatial coordinates. The co-occurrence score is defined as:

.. math::
   \frac{p(exp|cond)}{p(exp)}

where :math:`p(exp|cond)` is the conditional probability of observing a cluster :math:`exp` conditioned
on the presence of a cluster :math:`cond`, whereas :math:`p(exp)` is the probability of observing :math:`exp`
in the radius size of interest.
The score is computed across increasing radii size around each observation (i.e. spots here) in the tissue.

We are gonna compute such score with :func:`squidpy.gr.co_occurrence` and set the cluster annotation
for the conditional probability with the argument ``clusters``.
Then, we visualize the results with :func:`squidpy.pl.co_occurrence`.

.. GENERATED FROM PYTHON SOURCE LINES 195-203

.. code-block:: default

    sq.gr.co_occurrence(adata, cluster_key="cluster")
    sq.pl.co_occurrence(
        adata,
        cluster_key="cluster",
        clusters="Hippocampus",
        figsize=(8, 4),
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_004.png
   :alt: $\frac{p(exp|Hippocampus)}{p(exp)}$
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?/s]    100%|##########| 1/1 [00:00<00:00,  1.06/s]    100%|##########| 1/1 [00:00<00:00,  1.05/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 204-210

The result largely recapitulates the previous analysis:
the *Pyramidal_layer* cluster seem to co-occur at short distances
with the larger *Hippocampus* cluster.
It should be noted that the distance units are given in pixels of
the Visium ``source_image``, and corresponds to the same unit of
the spatial coordinates saved in ``adata.obsm['spatial']``.

.. GENERATED FROM PYTHON SOURCE LINES 212-231

Ligand-receptor interaction analysis
++++++++++++++++++++++++++++++++++++
We are continuing the analysis showing couple of feature-level methods that are very relevant
for the analysis of spatial molecular data. For instance, after
quantification of cluster co-occurrence,
we might be interested in finding molecular instances
that could potentially drive cellular communication.
This naturally translates in a ligand-receptor interaction analysis.
In Squidpy, we provide a fast re-implementation the popular method CellPhoneDB :cite:`cellphonedb`
(`code <https://github.com/Teichlab/cellphonedb>`_ )
and extended its database of annotated ligand-receptor interaction pairs with
the popular database *Omnipath* :cite:`omnipath`.
You can run the analysis for all clusters pairs, and all genes (in seconds,
without leaving this notebook), with :func:`squidpy.gr.ligrec`.
Furthermore, we'll directly visualize the results, filtering out lowly-expressed genes
(with the ``means_range`` argument) and increasing the threshold for
the adjusted p-value (with the ``alpha`` argument).
We'll also subset the visualization for only one source group,
the *Hippocampus* cluster, and two target groups, *Pyramidal_layer_dentate_gyrus* and *Pyramidal_layer* cluster.

.. GENERATED FROM PYTHON SOURCE LINES 231-246

.. code-block:: default

    sq.gr.ligrec(
        adata,
        n_perms=100,
        cluster_key="cluster",
    )
    sq.pl.ligrec(
        adata,
        cluster_key="cluster",
        source_groups="Hippocampus",
        target_groups=["Pyramidal_layer", "Pyramidal_layer_dentate_gyrus"],
        means_range=(3, np.inf),
        alpha=1e-4,
        swap_axes=True,
    )




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_005.png
   :alt: Receptor-ligand test, $-\log_{10} ~ P$, significant $p=0.0001$, $log_2(\frac{molecule_1 + molecule_2}{2} + 1)$
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?permutation/s]      1%|1         | 1/100 [00:13<22:36, 13.71s/permutation]      9%|9         | 9/100 [00:13<01:41,  1.12s/permutation]     17%|#7        | 17/100 [00:13<00:40,  2.04permutation/s]     25%|##5       | 25/100 [00:14<00:20,  3.62permutation/s]     33%|###3      | 33/100 [00:14<00:11,  5.74permutation/s]     41%|####1     | 41/100 [00:14<00:06,  8.56permutation/s]     49%|####9     | 49/100 [00:14<00:04, 12.19permutation/s]     57%|#####6    | 57/100 [00:14<00:02, 16.69permutation/s]     65%|######5   | 65/100 [00:14<00:01, 22.09permutation/s]     73%|#######3  | 73/100 [00:14<00:00, 28.28permutation/s]     81%|########1 | 81/100 [00:14<00:00, 34.84permutation/s]     89%|########9 | 89/100 [00:14<00:00, 41.12permutation/s]     97%|#########7| 97/100 [00:15<00:00, 47.04permutation/s]    100%|##########| 100/100 [00:15<00:00,  6.63permutation/s]




.. GENERATED FROM PYTHON SOURCE LINES 247-252

The dotplot visualization provides an interesting set of candidate ligand-receptor
annotation that could be involved in cellular interactions in the Hippocampus.
A more refined analysis would be for instance to integrate these results with
the results of a deconvolution method, to understand what's the proportion of single-cell
cell types present in this region of the tissue.

.. GENERATED FROM PYTHON SOURCE LINES 254-275

Spatially variable genes with Moran's I
+++++++++++++++++++++++++++++++++++++++
Finally, we might be interested in finding genes that show spatial patterns.
There are several methods that aimed at address this explicitly,
based on point processes or Gaussian process regression framework:

  - *SPARK* - `paper <https://www.nature.com/articles/s41592-019-0701-7#Abs1>`__,
    `code <https://github.com/xzhoulab/SPARK>`__.
  - *Spatial DE*  - `paper <https://www.nature.com/articles/nmeth.4636>`__,
    `code <https://github.com/Teichlab/SpatialDE>`__.
  - *trendsceek* - `paper <https://www.nature.com/articles/nmeth.4634>`__,
    `code <https://github.com/edsgard/trendsceek>`__.
  - *HMRF* - `paper <https://www.nature.com/articles/nbt.4260>`__,
    `code <https://bitbucket.org/qzhudfci/smfishhmrf-py>`__.

Here, we provide a simple approach based on the well-known
`Moran's I statistics <https://en.wikipedia.org/wiki/Moran%27s_I>`_
which is in fact used also as a baseline method in the spatially variable gene papers listed above.
The function in Squidpy is called :func:`squidpy.gr.spatial_autocorr`, and
returns both test statistics and adjusted p-values in :attr:`anndata.AnnData.var` slot.
For time reasons, we will evaluate a subset of the highly variable genes only.

.. GENERATED FROM PYTHON SOURCE LINES 275-284

.. code-block:: default

    genes = adata[:, adata.var.highly_variable].var_names.values[:1000]
    sq.gr.spatial_autocorr(
        adata,
        mode="moran",
        genes=genes,
        n_perms=100,
        n_jobs=1,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?/s]      1%|1         | 1/100 [00:01<02:14,  1.36s/]      2%|2         | 2/100 [00:02<02:09,  1.32s/]      3%|3         | 3/100 [00:03<02:06,  1.30s/]      4%|4         | 4/100 [00:05<02:04,  1.29s/]      5%|5         | 5/100 [00:06<02:02,  1.29s/]      6%|6         | 6/100 [00:07<02:01,  1.29s/]      7%|7         | 7/100 [00:08<01:56,  1.25s/]      8%|8         | 8/100 [00:10<01:55,  1.26s/]      9%|9         | 9/100 [00:11<01:55,  1.27s/]     10%|#         | 10/100 [00:12<01:54,  1.27s/]     11%|#1        | 11/100 [00:14<01:53,  1.28s/]     12%|#2        | 12/100 [00:15<01:52,  1.28s/]     13%|#3        | 13/100 [00:16<01:51,  1.28s/]     14%|#4        | 14/100 [00:17<01:50,  1.29s/]     15%|#5        | 15/100 [00:19<01:49,  1.29s/]     16%|#6        | 16/100 [00:20<01:48,  1.30s/]     17%|#7        | 17/100 [00:21<01:47,  1.30s/]     18%|#8        | 18/100 [00:23<01:46,  1.30s/]     19%|#9        | 19/100 [00:24<01:44,  1.30s/]     20%|##        | 20/100 [00:25<01:43,  1.30s/]     21%|##1       | 21/100 [00:27<01:42,  1.30s/]     22%|##2       | 22/100 [00:28<01:40,  1.29s/]     23%|##3       | 23/100 [00:29<01:39,  1.29s/]     24%|##4       | 24/100 [00:30<01:38,  1.30s/]     25%|##5       | 25/100 [00:32<01:37,  1.30s/]     26%|##6       | 26/100 [00:33<01:36,  1.30s/]     27%|##7       | 27/100 [00:34<01:34,  1.30s/]     28%|##8       | 28/100 [00:36<01:31,  1.26s/]     29%|##9       | 29/100 [00:37<01:30,  1.27s/]     30%|###       | 30/100 [00:38<01:29,  1.27s/]     31%|###1      | 31/100 [00:39<01:28,  1.28s/]     32%|###2      | 32/100 [00:41<01:27,  1.28s/]     33%|###3      | 33/100 [00:42<01:26,  1.29s/]     34%|###4      | 34/100 [00:43<01:25,  1.29s/]     35%|###5      | 35/100 [00:45<01:23,  1.29s/]     36%|###6      | 36/100 [00:46<01:22,  1.28s/]     37%|###7      | 37/100 [00:47<01:21,  1.29s/]     38%|###8      | 38/100 [00:48<01:20,  1.29s/]     39%|###9      | 39/100 [00:50<01:19,  1.30s/]     40%|####      | 40/100 [00:51<01:18,  1.30s/]     41%|####1     | 41/100 [00:52<01:16,  1.30s/]     42%|####2     | 42/100 [00:54<01:15,  1.30s/]     43%|####3     | 43/100 [00:55<01:13,  1.30s/]     44%|####4     | 44/100 [00:56<01:12,  1.29s/]     45%|####5     | 45/100 [00:57<01:10,  1.29s/]     46%|####6     | 46/100 [00:59<01:09,  1.28s/]     47%|####6     | 47/100 [01:00<01:07,  1.28s/]     48%|####8     | 48/100 [01:01<01:06,  1.28s/]     49%|####9     | 49/100 [01:03<01:05,  1.29s/]     50%|#####     | 50/100 [01:04<01:04,  1.28s/]     51%|#####1    | 51/100 [01:05<01:03,  1.29s/]     52%|#####2    | 52/100 [01:06<01:02,  1.29s/]     53%|#####3    | 53/100 [01:08<01:00,  1.29s/]     54%|#####4    | 54/100 [01:09<00:59,  1.29s/]     55%|#####5    | 55/100 [01:10<00:57,  1.29s/]     56%|#####6    | 56/100 [01:12<00:56,  1.29s/]     57%|#####6    | 57/100 [01:13<00:55,  1.30s/]     58%|#####8    | 58/100 [01:14<00:54,  1.30s/]     59%|#####8    | 59/100 [01:16<00:53,  1.30s/]     60%|######    | 60/100 [01:17<00:51,  1.30s/]     61%|######1   | 61/100 [01:18<00:50,  1.30s/]     62%|######2   | 62/100 [01:19<00:49,  1.30s/]     63%|######3   | 63/100 [01:21<00:48,  1.30s/]     64%|######4   | 64/100 [01:22<00:46,  1.30s/]     65%|######5   | 65/100 [01:23<00:45,  1.30s/]     66%|######6   | 66/100 [01:25<00:44,  1.30s/]     67%|######7   | 67/100 [01:26<00:43,  1.30s/]     68%|######8   | 68/100 [01:27<00:41,  1.30s/]     69%|######9   | 69/100 [01:29<00:40,  1.30s/]     70%|#######   | 70/100 [01:30<00:38,  1.30s/]     71%|#######1  | 71/100 [01:31<00:37,  1.30s/]     72%|#######2  | 72/100 [01:32<00:36,  1.30s/]     73%|#######3  | 73/100 [01:34<00:34,  1.29s/]     74%|#######4  | 74/100 [01:35<00:32,  1.26s/]     75%|#######5  | 75/100 [01:36<00:31,  1.27s/]     76%|#######6  | 76/100 [01:38<00:30,  1.28s/]     77%|#######7  | 77/100 [01:39<00:29,  1.29s/]     78%|#######8  | 78/100 [01:40<00:28,  1.29s/]     79%|#######9  | 79/100 [01:41<00:27,  1.29s/]     80%|########  | 80/100 [01:43<00:25,  1.30s/]     81%|########1 | 81/100 [01:44<00:24,  1.30s/]     82%|########2 | 82/100 [01:45<00:23,  1.30s/]     83%|########2 | 83/100 [01:47<00:22,  1.30s/]     84%|########4 | 84/100 [01:48<00:20,  1.30s/]     85%|########5 | 85/100 [01:49<00:19,  1.30s/]     86%|########6 | 86/100 [01:51<00:18,  1.29s/]     87%|########7 | 87/100 [01:52<00:16,  1.29s/]     88%|########8 | 88/100 [01:53<00:15,  1.29s/]     89%|########9 | 89/100 [01:54<00:14,  1.29s/]     90%|######### | 90/100 [01:56<00:12,  1.30s/]     91%|#########1| 91/100 [01:57<00:11,  1.30s/]     92%|#########2| 92/100 [01:58<00:10,  1.29s/]     93%|#########3| 93/100 [02:00<00:09,  1.30s/]     94%|#########3| 94/100 [02:01<00:07,  1.30s/]     95%|#########5| 95/100 [02:02<00:06,  1.30s/]     96%|#########6| 96/100 [02:04<00:05,  1.30s/]     97%|#########7| 97/100 [02:05<00:03,  1.30s/]     98%|#########8| 98/100 [02:06<00:02,  1.30s/]     99%|#########9| 99/100 [02:07<00:01,  1.30s/]    100%|##########| 100/100 [02:09<00:00,  1.30s/]    100%|##########| 100/100 [02:09<00:00,  1.29s/]




.. GENERATED FROM PYTHON SOURCE LINES 285-287

The results are saved in ``adata.uns['moranI']`` slot.
Genes have already been sorted by Moran's I statistic.

.. GENERATED FROM PYTHON SOURCE LINES 287-289

.. code-block:: default

    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_z_sim</th>
          <th>pval_sim</th>
          <th>var_sim</th>
          <th>pval_norm_fdr_bh</th>
          <th>pval_z_sim_fdr_bh</th>
          <th>pval_sim_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Olfm1</th>
          <td>0.763291</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000220</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Plp1</th>
          <td>0.747660</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000275</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Itpka</th>
          <td>0.727076</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000257</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Snap25</th>
          <td>0.720987</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000280</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Nnat</th>
          <td>0.708637</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000306</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Ppp3ca</th>
          <td>0.693320</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000276</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Chn1</th>
          <td>0.684957</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000285</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Mal</th>
          <td>0.679775</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000266</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Tmsb4x</th>
          <td>0.676719</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000206</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
        <tr>
          <th>Cldn11</th>
          <td>0.674110</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000264</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011635</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 290-291

We can select few genes and visualize their expression levels in the tissue with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 291-293

.. code-block:: default

    sc.pl.spatial(adata, color=["Olfm1", "Plp1", "Itpka", "cluster"])




.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_006.png
   :alt: Olfm1, Plp1, Itpka, cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_visium_hne_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 294-295

Interestingly, some of these genes seems to be related to the *pyramidal* layers and the *fiber tract*.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  53.113 seconds)

**Estimated memory usage:**  975 MB


.. _sphx_glr_download_auto_tutorials_tutorial_visium_hne.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_visium_hne.py <tutorial_visium_hne.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_visium_hne.ipynb <tutorial_visium_hne.ipynb>`
